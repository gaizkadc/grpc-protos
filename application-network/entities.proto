/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package application_network;
option go_package = "github.com/nalej/grpc-application-network-go";

enum ConnectionStatus {
    WAITING = 0;
    ESTABLISHED = 1;
    TERMINATED = 2;
    FAILED = 3;
}
// ConnectionInstance structure to represent a connection between two services of different instances (outbound - inbound)
message ConnectionInstance{
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // ConnectionId with the connection identifier
    string connection_id = 2;
    // SourceInstanceId with the identifier of the outbound instance
    string source_instance_id = 3;
    // SourceInstanceId with the name of the outbound instance
    string source_instance_name = 4;
    // TargetInstanceId with the identifier of the inbound instance
    string target_instance_id = 5;
    // TargetInstanceId with the identifier of the inbound instance
    string target_instance_name = 6;
    // InboundName with the name of the inbound identifier
    string inbound_name = 7;
    // OutboundName with the name of the outbound identifier
    string outbound_name = 8;
    // OutboundRequired is a flag that indicates if the outbound connection should be informed when deploying an instance
    bool outbound_required = 9;
    // Status Status of the connection
    ConnectionStatus status = 10;
    // IpRange The range of IPs associated to the network where the peers are connected
    string ip_range = 11;
    // ZtNetworkId A link to the zt network created for the connection
    string zt_network_id = 12;
}

message ConnectionInstanceId{
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // ConnectionId with the connection identifier
    string connection_id = 2;
    // SourceInstanceId with the identifier of the outbound instance
    string source_instance_id = 3;
    // TargetInstanceId with the identifier of the inbound instance
    string target_instance_id = 4;
    // InboundName with the name of the inbound identifier
    string inbound_name = 5;
    // OutboundName with the name of the outbound identifier
    string outbound_name = 6;
}

// ConnectionInstanceList is a list of ConnectionInstance
message ConnectionInstanceList {
    repeated ConnectionInstance connections = 1;
}

// ConnectionInstanceLink represents a single connection between two fragments on two clusters.
// When multiplicity is applied we must expected several links per instance
message ConnectionInstanceLink{
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // ConnectionId with the connection identifier
    string connection_id = 2;
    // SourceInstanceId with the identifier of the outbound instance
    string source_instance_id = 3;
    // SourceClusterId with the identifier of the cluster where the outbound instance is deployed
    string source_cluster_id = 4;
    // TargetInstanceId with the identifier of the inbound instance
    string target_instance_id = 5;
    // TargetClusterId with the identifier of the cluster where the inbound instance is deployed
    string target_cluster_id = 6;
    // InboundName with the name of the inbound identifier
    string inbound_name = 7;
    // OutnboundName with the name of the outbound identifier
    string outbound_name = 8;
    // Status Status of the connection
    ConnectionStatus status = 10;
}

// AddConnectionRequest structure to add a new connection
message AddConnectionRequest {
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // SourceInstanceId with the identifier of the outbound instance
    string source_instance_id = 2;
    // TargetInstanceId with the identifier of the inbound instance
    string target_instance_id = 3;
    // InboundName with the name of the inbound identifier
    string inbound_name = 4;
    // OutboundName with the name of the outbound identifier
    string outbound_name = 5;
    // IpRange the IpRange for the connection
    string ip_range = 6;
    // ZtNetworkId A link to the zt network created for the connection
    string zt_network_id = 7;
}

// UpdateConnectionRequest contains the information required to update the volatile fields of a connection
message UpdateConnectionRequest {
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // SourceInstanceId with the identifier of the outbound instance
    string source_instance_id = 2;
    // TargetInstanceId with the identifier of the inbound instance
    string target_instance_id = 3;
    // InboundName with the name of the inbound identifier
    string inbound_name = 4;
    // OutboundName with the name of the outbound identifier
    string outbound_name = 5;
    // UpdateStatus flag to allow status update
    bool update_status = 6;
    // Status the new status for the connection
    ConnectionStatus status = 7;
    // UpdateIpRange flag to allow IpRange update
    bool update_ip_range = 8;
    // IpRange the new IpRange for the connection
    string ip_range = 9;
    // UpdateZtNetworkId flag to allow ZtNetworkId update
    bool update_zt_network_id = 10;
    // ZtNetworkId A link to the zt network created for the connection
    string zt_network_id = 11;
}

// RemoveConnectionRequest contains the information required to remove a connection
message RemoveConnectionRequest {
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // SourceInstanceId with the identifier of the outbound instance
    string source_instance_id = 2;
    // TargetInstanceId with the identifier of the inbound instance
    string target_instance_id = 3;
    // InboundName with the name of the inbound identifier
    string inbound_name = 4;
    // OutboundName with the name of the outbound identifier
    string outbound_name = 5;
    // UserConfirmation is a flag required to remove a connection between and inbound and a required outbound
    bool user_confirmation = 6;
}

// ----------------------
// AddZTNetworkConnection
// ----------------------
enum ConnectionSide {
    SIDE_INBOUND = 0;
    SIDE_OUTBOUND = 1;
}

message ZTNetworkConnection {
    // Organization ID
    string organization_id = 1;
    // ZtNetworkId zero tier network identifier
    string zt_network_id = 2;
    // Application instance identifier
    string app_instance_id = 3;
    // ServiceId with the service identifier
    string service_id = 4;
    // ZtMember zero tier member identifier
    string zt_member = 5;
    // ZtIp
    string zt_ip = 6;
    // ClusterId with the cluster identifier
    string cluster_id = 7;
    // Side to indicate if the instance is the inbound or the outbound in the connection
    ConnectionSide side = 8;
}

message ZTNetworkConnectionList {
    repeated ZTNetworkConnection connections = 1;
}

message ZTNetworkId {
    // Organization ID
    string organization_id = 1;
    // ZtNetworkId zero tier network identifier
    string zt_network_id = 2;
}

message ZTNetworkConnectionId {
    // Organization ID
    string organization_id = 1;
    // ZtNetworkId zero tier network identifier
    string zt_network_id = 2;
    // Application instance identifier
    string app_instance_id = 3;
    // ServiceId with the service identifier
    string service_id = 4;
    // ClusterId with the cluster identifier
    string cluster_id = 5;
}

message UpdateZTNetworkConnectionRequest {
    // Organization ID
    string organization_id = 1;
    // ZtNetworkId zero tier network identifier
    string zt_network_id = 2;
    // Application instance identifier
    string app_instance_id = 3;
    // ServiceId with the service identifier
    string service_id = 4;
    // ClusterId with the cluster identifier
    string cluster_id = 5;
    //UpdateZtIp flag to indicate zt_ip is going to be updated
    bool update_zt_ip = 6;
    // ZtIp
    string zt_ip = 7;
    // UpdateZtMember flag to indicate zt_member is going to be updated
    bool update_zt_member = 8;
    // ZtMember 
    string zt_member = 9;
}
