/*
 * Copyright (C) 2018 Nalej - All Rights Reserved
 */

syntax = "proto3";

package inventory;
option go_package = "github.com/nalej/grpc-inventory-go";

//
// Assets.
//

// OperatingSystemClass defines the types of OS supported.
enum OperatingSystemClass {
    LINUX = 0;
    WINDOWS = 1;
    DARWIN = 2;
}

// InventoryLocation defines the location of a device, ec or asset
message InventoryLocation {
    // geolocation defines the location
    string geolocation = 1;
    // geohash defines the location using a short alphanumeric string
    string geohash = 2;

}

// OperatingSystemInfo contains information about the operating system of an asset. Notice that no
// enums have been used for either the name or the version as to no constraint the elements of the
// inventory even if we do not have an agent running supporting those.
message OperatingSystemInfo{
    // Name of the operating system. Expecting full name.
    string name = 1;
    // Version installed.
    string version = 2;
    // Class of the operating system - determines the binary format together with architecture
    OperatingSystemClass class = 3;
    // Architecture of the OS.
    string architecture = 4;
}

// HardareInfo contains information about the hardware of an asset.
message HardwareInfo{
    // CPUs contains the list of CPU available in a given asset.
    repeated CPUInfo cpus = 1;
    // InstalledRam contains the total RAM available in MB.
    int64 installed_ram = 2;
    // NetInterfaces with the list of networking cards.
    repeated NetworkingHardwareInfo net_interfaces = 3;
}

// CPUInfo contains information about a CPU.
message CPUInfo{
    // Manufacturer of the CPU.
    string manufacturer = 1;
    // Model of the CPU.
    string model = 2;
    // Architecture of the CPU.
    string architecture = 3;
    // NumCores with the number of cores.
    int32 num_cores = 4;
}

// NetworkingHardwareInfo with the list of network interfaces that are available.
message NetworkingHardwareInfo{
    // Type of network interface. For example, ethernet, wifi, infiniband, etc.
    string type = 1;
    // Link capacity in Mbps.
    int64 link_capacity = 2;
}

// StorageHardwareInfo with the storage related information.
message StorageHardwareInfo{
    // Type of storage.
    string type = 1;
    // Total capacity in MB.
    int64 total_capacity = 2;
}

// AgentOpStatus contains the status of the execution of a given agent operation.
enum AgentOpStatus{
    SCHEDULED = 0;
    SUCCESS = 1;
    FAIL = 2;
}

// AgentOpSummary contains the result of an asset operation
// this is a provisional result!
message AgentOpSummary{
    // OperationId with the operation identifier.
    string operation_id = 4;
    // Timestamp of the response.
    int64 timestamp = 5;
    // Status indicates if the operation was successful
    AgentOpStatus status = 6;
    // Info with additional information for an operation.
    string info = 7;
}

// Asset represents an element in the network from which we register some type of information. Example of
// assets could be workstations, nodes in a cluster, or other type of hardware.
message Asset{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // EdgeControllerId with the EIC identifier.
    string edge_controller_id = 2;
    // AssetId with the asset identifier.
    string asset_id = 3;
    // AgentId with the agent identifier that is monitoring this asset if any.
    string agent_id = 4;
    // Show flag to determine if this asset should be shown on the UI. This flag is internally used
    // for the async uninstall/removal of the asset.
    bool show = 5;
    // Created time
    int64 created = 6;
    // Labels defined by the user.
    map<string, string> labels = 7;
    // OS contains Operating System information.
    OperatingSystemInfo os = 8;
    // Hardware information.
    HardwareInfo hardware = 9;
    // Storage information.
    repeated StorageHardwareInfo storage = 10;
    // EicNetIp contains the current IP address that connects the asset to the EIC.
    string eic_net_ip = 11;
    // AgentOpSummary contains the result of the last operation fr this asset
    AgentOpSummary last_op_result = 12;
    // LastAliveTimestamp contains the last alive message received
    int64 last_alive_timestamp = 13;
    // location with the asset location
    InventoryLocation location = 14;
}

// AddAssetRequest with the message sent to create a new asset.
message AddAssetRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // EdgeControllerId with the EIC identifier.
    string edge_controller_id = 2;
    // AgentId with the agent identifier that is monitoring this asset if any.
    string agent_id = 3;
    // Labels defined by the user.
    map<string, string> labels = 4;
    // OS contains Operating System information.
    OperatingSystemInfo os = 5;
    // Hardware information.
    HardwareInfo hardware = 6;
    // Storage information.
    repeated StorageHardwareInfo storage = 7;
    // location with the asset location
    InventoryLocation location = 8;
}

// AssetId
message AssetId{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AssetId with the asset identifier.
    string asset_id = 2;
}

// AssetUninstalledId with the message sent to inform that an asset has been installed
message AssetUninstalledId {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AssetId with the asset identifier.
    string asset_id = 2;
}
// AssetList with a list of assets.
message AssetList{
    // Assets
    repeated Asset assets = 1;
}

message UpdateAssetRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AssetId with the asset identifier.
    string asset_id = 2;
    // Add Label flag to indicate that the set of labels need to be added.
    bool add_labels = 3;
    // Remove label flag to indicate that the set of labels need to be removed.
    bool remove_labels = 4;
    // Labels for the cluster.
    map <string, string> labels = 5;
    // UpdateLastOpSummary flag to indicate that last_alive_timestamp need to be updated
    bool update_last_op_summary = 6;
    // LastOpSummary contains the result of the last operation fr this asset
    AgentOpSummary last_op_summary = 7;
    // UpdateLastAlive flag to indicate that last_alive_timestamp need to be updated
    bool update_last_alive = 8;
    // LastAliveTimestamp contains the last alive message received
    int64 last_alive_timestamp = 9;
    // UpdateIP contains a flag to indicate if eic_net_ip need to be updated
    bool update_ip = 10;
    // EicNetIp contains the current IP address that connects the asset to the EIC.
    string eic_net_ip = 11;
    // UpdateLocation flag to indicate that location needs to be updated
    bool update_location = 12;
    // location with the asset location
    InventoryLocation location = 13;
}

//
// Controller
//

// EdgeControllerId with the EIC identifier on a given organization.
message EdgeControllerId{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // EdgeControllerId with the EIC identifier.
    string edge_controller_id = 2;
}

// EdgeController entity.
message EdgeController{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // EdgeControllerId with the EIC identifier.
    string edge_controller_id = 2;
    // Show flag to determine if this asset should be shown on the UI. This flag is internally used
    // for the async uninstall/removal of the asset.
    bool show = 3;
    // Created time
    int64 created = 4;
    // Name of the EIC.
    string name = 5;
    // Labels defined by the user.
    map<string, string> labels = 6;
    // LastAliveTimestamp contains the last alive message received
    int64 last_alive_timestamp = 7;
    // location with the EC location
    InventoryLocation location = 8;
}

// EdgeControllerList with a list of controllers.
message EdgeControllerList{
    // Controllers
    repeated EdgeController controllers = 1;
}

message AddEdgeControllerRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // Name of the EIC.
    string name = 2;
    // Labels defined by the user.
    map<string, string> labels = 3;
    // location with the EC location
    string geolocation = 4;
}

message UpdateEdgeControllerRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // EdgeControllerId with the EIC identifier.
    string edge_controller_id = 2;
    // Add Label flag to indicate that the set of labels need to be added.
    bool add_labels = 3;
    // Remove label flag to indicate that the set of labels need to be removed.
    bool remove_labels = 4;
    // Labels for the cluster.
    map <string, string> labels = 5;
    // UpdateLastAlive flag to indicate that last_alive_timestamp need to be updated
    bool update_last_alive = 6;
    // LastAliveTimestamp contains the last alive message received
    int64 last_alive_timestamp = 7;
    // UpdateLocation flag to indicate that location need to be updated
    bool update_geolocation = 8;
    // location with the EC geolocation
    string geolocation = 9;
}