/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package inventory;
option go_package = "github.com/nalej/grpc-inventory-go";

import "common/entities.proto";
import "inventory/entities.proto";
import "organization/entities.proto";

// Assets operations.
service Assets {
    // Add a new asset to the system.
    rpc Add(AddAssetRequest) returns (Asset){}
    // List the assets of an organization.
    rpc List(organization.OrganizationId) returns (AssetList){}
    // ListControllerAssets retrieves the list of assets managed by a given controller.
    rpc ListControllerAssets(EdgeControllerId) returns (AssetList){}
    // Get retrieves a given asset
    rpc Get(AssetId) returns (Asset){}
    // Remove a given assets from an organization.
    rpc Remove(AssetId) returns (common.Success){}
    // Update the information of an asset.
    rpc Update(UpdateAssetRequest) returns (Asset){}
}

// Controllers operations
service Controllers {
    // Add a controller to the system.
    rpc Add(AddEdgeControllerRequest) returns (EdgeController){}
    // List the controllers of an organization.
    rpc List(organization.OrganizationId) returns (EdgeControllerList){}
    // Get the information of an edge controller.
    rpc Get(EdgeControllerId) returns (EdgeController){}
    // Remove a given controller from an organization.
    rpc Remove(EdgeControllerId) returns (common.Success){}
    // Update the information of a controller.
    rpc Update(UpdateEdgeControllerRequest) returns (EdgeController){}
}