/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package installer;
option go_package = "github.com/nalej/grpc-installer-go";

import "infrastructure/entities.proto";

// InstallProgress enumeration with the different states of an install process.
enum InstallProgress {
    // INIT represents the initial state of the workflow.
    INIT = 0;
    // REGISTERED represents a install request that is on the queue.
    REGISTERED = 1;
    // IN_PROGRESS represents a install that is being processed.
    IN_PROGRESS = 2;
    // ERROR represents a install that failed.
    ERROR = 3;
    // FINISHED represents a sucessful install.
    FINISHED = 4;
}

// Platform enumerator with the type of platform for an install request
enum Platform {
    // Minikube for local deployments
    MINIKUBE = 0;
    // Azure for cloud-based deployments
    AZURE = 1;
    // Baremetal install relying on MetalLB.
    BAREMETAL = 2;
}

// InstallRequest message used to specify the cluster to be installed.
message InstallRequest {
    // RequestId generated by the infrastructure-manager component to track the uninstall operation.
    string request_id = 1;
    // OrganizationId with the organization identifier.
    string organization_id = 2;
    // ClusterId with the cluster identifier.
    string cluster_id = 3;
    // Type of cluster.
    infrastructure.ClusterType cluster_type = 4;
    // InstallBaseSystem flag to indicate tha the base system must be installed on the nodes.
    bool install_base_system = 5;
    // KubeConfigRaw contains the required data to connect to a Kubernetes cluster in case it is already installed.
    string kube_config_raw = 6;
    // Hostname of the cluster master. This value is used to connect to the app cluster ingress.
    string hostname = 7;
    // Username to connect to the remote machines when the base system needs to be installed.
    string username = 8;
    // PrivateKey contains the SSH private key required when the base system needs to be installed.
    string private_key = 9;
    // Nodes contains the list of IP addresses to be installed.
    repeated string nodes = 10;
    // Target platform
    Platform target_platform = 11;
    // Static IP addresses
    StaticIPAddresses static_ip_addresses = 12;
}

// InstallId message with the install identifier.
message InstallId {
    // InstallId associated with the remove request.
    string install_id = 1;
}

// RemoveInstallRequest to remove all information related to a given install process.
message RemoveInstallRequest {
    // InstallId associated with the remove request.
    string install_id = 1;
}

// StaticIPAddresses message with the static IP configuration
message StaticIPAddresses {
    // Use static IP addresses or not
    bool use_static_ip = 1;
    // Public ingress static IP address
    string ingress = 2;
    // Public DNS static IP address
    string dns = 3;
    // ZT Planet static IP address
    string zt_planet = 4;
    // CoreDNS (External DNS) static IP address
    string coredns_ext = 5;
    // VPN Server static IP address
    string vpn_server = 6;
}

// UninstallClusterRequest message with the information required to uninstall a cluster.
message UninstallClusterRequest {
    // RequestId generated by the infrastructure-manager component to track the uninstall operation.
    string request_id = 1;
    // OrganizationId with the organization identifier.
    string organization_id = 2;
    // ClusterId with the cluster identifier.
    string cluster_id = 3;
    // Type of cluster.
    infrastructure.ClusterType cluster_type = 4;
    // KubeConfigRaw contains the required data to connect to a Kubernetes cluster in case it is already installed.
    string kube_config_raw = 5;
    // Target platform
    Platform target_platform = 6;
}
