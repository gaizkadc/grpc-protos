/*
 * Copyright (C) 2019 Nalej - All Rights Reserved
 */

syntax = "proto3";

package inventory_manager;
option go_package = "github.com/nalej/grpc-inventory-manager-go";

import "organization/entities.proto";
import "common/entities.proto";
import "inventory-manager/entities.proto";
import "inventory/entities.proto";

// Inventory services.
service Inventory{
    // List the devices, assets and controllers.
    rpc List(organization.OrganizationId) returns (InventoryList){}
    // GetControllerExtendedInfo returns the information of the edge controller with the information of its assets.
    rpc GetControllerExtendedInfo(inventory.EdgeControllerId) returns (EdgeControllerExtendedInfo){}
    // GetAssetInfo returns the information of a given asset
    rpc GetAssetInfo(inventory.AssetId) returns (Asset){}
    // GetAssetInfo returns the information of a given device
    rpc GetDeviceInfo (DeviceId) returns (Device) {}
    // Summary retrieves a summary of the assets in the inventory.
    rpc Summary(organization.OrganizationId) returns (InventorySummary){}
    // UpdateAsset updates an asset in the inventory.
    rpc UpdateAsset (inventory.UpdateAssetRequest) returns (inventory.Asset){}
    // UpdateDevice updates a device in the inventory.
    rpc UpdateDevice (UpdateDeviceLocationRequest) returns (Device){}
}

// Inventory Monitoring related operations
service InventoryMonitoring{
    // List available metrics for a specific Edge Controller or
    // asset selector
    rpc ListMetrics(AssetSelector) returns (MetricsList){}
    // Query monitoring metrics
    rpc QueryMetrics(QueryMetricsRequest) returns (QueryMetricsResult){}
}

// EIC related operations.
service EIC{
    // CreateEICToken creates a new token for an EIC to join the platform.
    rpc CreateEICToken(organization.OrganizationId) returns (EICJoinToken){}
    // EICJoin processes a join request.
    rpc EICJoin(EICJoinRequest) returns (EICJoinResponse){}
    // EICStart operation invoked by the EIC every time it connects back to the platform.
    rpc EICStart(EICStartInfo) returns (common.Success){}
    // UnlinkEIC operation to remove/uninstall an EIC.
    rpc UnlinkEIC(inventory.EdgeControllerId) returns (common.Success){}
    // ConfigureEIC changes specific configurable options for one ore more ECs
    rpc ConfigureEIC(ConfigureEICRequest) returns (common.Success){}
    // Check if EIC is alive
    rpc EICAlive (inventory.EdgeControllerId) returns (common.Success) {}
    // UpdateECLocation operation to update the geolocation
    rpc UpdateECGeolocation (UpdateGeolocationRequest) returns (inventory.EdgeController) {}
    // CallbackECOperation is called by an EC upon executing an asynchronous operation.
    rpc CallbackECOperation(EdgeControllerOpResponse) returns (common.Success){}
    // UpdateEC updates an Edge Controller
    rpc UpdateEC (inventory.UpdateEdgeControllerRequest) returns (inventory.EdgeController) {}

}

// Agent operations.
service Agent{
    // InstallAgent triggers the installation of an agent.
    rpc InstallAgent(InstallAgentRequest) returns (InstallAgentResponse){}
    // CreateAgentJoinToken creates a join token for an agent on a remote EIC.
    rpc CreateAgentJoinToken(inventory.EdgeControllerId) returns (AgentJoinToken){}
    // AgentJoin processes a join request from a remote agent.
    rpc AgentJoin(AgentJoinRequest) returns (AgentJoinResponse){}
    // LogAgentAlive method invoked by the EIC to update the status of several agents.
    rpc LogAgentAlive(AgentsAlive) returns (common.Success){}
    // TriggerAgentOperation triggers the execution of an operation in an agent managed by an EIC.
    rpc TriggerAgentOperation(AgentOpRequest) returns (AgentOpResponse){}
    // CallbackAgentOperation is called by the EIC upon execution of the operation by the agent.
    rpc CallbackAgentOperation(AgentOpResponse) returns (common.Success){}
    // ListAgentOperations retrieves the history of operations executed by the agent.
    rpc ListAgentOperations(AgentId) returns (AgentOpResponseList){}
    // DeleteAgentOperation deletes an agent operation from the history.
    rpc DeleteAgentOperation(AgentOperationId) returns (common.Success){}
    // UninstallAgent operation to uninstall an agent
    rpc UninstallAgent (inventory.AssetId) returns (common.Success){}
    // UninstalledAgent operation to notify an agent has been uninstalled
    rpc UninstalledAgent (inventory.AssetUninstalledId) returns (common.Success) {}
}
