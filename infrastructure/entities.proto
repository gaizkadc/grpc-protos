/*
 * Copyright (C) 2018 Nalej - All Rights Reserved
 */

syntax = "proto3";

package infrastructure;
option go_package = "github.com/nalej/grpc-infrastructure-go";

import "cluster-watcher/entities.proto";
import "connectivity-manager/entities.proto";

// ClusterType enumeration with the types of clusters supported to manage application deployments.
enum ClusterType {
    KUBERNETES = 0;
    DOCKER_NODE = 1;
}

// MultinenantSupport enumeration defining the types of multitenancy supported by the system. Notice that even
// if it is modeled as a boolean now, we leave the definition as an enumeration to support other types of multitenancy
// like restrictions to parts of an organization, or priority based options.
enum MultitenantSupport {
    NO = 0;
    YES = 1;
}

// InfraStatus enumeration defining the status of an element of the infrastructure.
enum InfraStatus {
    // Installing state represents an infrastructure element that is being installed at the momment.
    INSTALLING = 0;
    // Running state represents an infrastucture element that has been installed as is up and running.
    RUNNING = 1;
    // Error state represents an infrastructure element that cannot be used as any of the processes failed.
    ERROR = 2;
}

// NodeState enumeration defining the states of a node from when it is declared to when it has been installed and
// assigned to a given cluster.
enum NodeState {
    // Unregistered nodes are those whose details are in the platform but we have not perform any action.
    UNREGISTERED = 0;
    // Unassigned nodes are those that have been prepared but are not assigned to a given cluster.
    UNASSIGNED = 1;
    // Assigned nodes are those that have been installed and are part of a cluster.
    ASSIGNED = 2;
}

// ClusterState defines the different states of a cluster regarding its provisioning and installation.
enum ClusterState {
    // Unknown indicates that the cluster has just been created in system model and no provisioning or install operation has taken place.
    UNKNOWN = 0;
    // Provisioning indicates that the cluster is now being provisioned in a cloud provider or through baremetal provisioning.
    PROVISIONING = 1;
    // Provisioned indicates that the cluster has been successfully provisioned and it is ready to be installed.
    PROVISIONED = 2;
    // InstallInProgress indicates that the Nalej platform is being installed on the target cluster.
    INSTALL_IN_PROGRESS = 3;
    // Installed indicates that the Nalej platform has been successfully deployed on the target cluster.
    INSTALLED = 4;
    // Scaling indicates that the cluster is now being modified in terms of number of available nodes.
    SCALING = 5;
    // Failure indicates that a process related to provisioning or installation has failed.
    FAILURE = 6;
    // Uninstalling indicates that the cluster is now being uninstalled and the platform is being undeployed.
    UNINSTALLING = 7;
    // Decomisioning indicates that the hardware resources are being freed.
    DECOMISIONING = 8;
}

// Cluster entity representing a collection of nodes that supports applicaiton orchestration. This
// abstraction is used for monitoring and orchestration purposes.
message Cluster {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // ClusterId with the cluster identifier.
    string cluster_id = 2;
    // Name of the cluster.
    string name = 3;
    // Type of cluster.
    ClusterType cluster_type = 4;
    // Hostname of the cluster master. This value is used to connect to the app cluster ingress.
    string hostname = 5;
    // ControlPlaneHostname with the hostname to access K8s API.
    string control_plane_hostname = 6;
    // Multitenant support definition.
    MultitenantSupport multitenant = 7;
    // Labels for the cluster.
    map <string, string> labels = 8;
    // Information used by the cluster watcher to control this cluster
    cluster_watcher.ClusterWatchInfo cluster_watch = 9;
    // Grace period from which a cluster that doesn't seem to be alive will switch to Offline_Cordon status
    int64 grace_period = 10;
    // Status with the status of the cluster based on cluster alive signals sent between connectivity manager and checker
    connectivity_manager.ClusterStatus cluster_status = 11;
    // Last alive timestamp
    int64 last_alive_timestamp = 12;
    // State of the cluster with respect to provisioning and installation.
    ClusterState state = 13;
}

message ClusterId {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // ClusterId with the cluster identifier.
    string cluster_id = 2;
}

message SetClusterStatusRequest {
    // ClusterId
    ClusterId cluster_id = 1;
    // True to be cordon, false otherwise
    bool cordon = 2;
}

message AddClusterRequest {
    string request_id = 1;
    // OrganizationId with the organization identifier.
    string organization_id = 2;
    // ClusterId with the cluster identifier.
    string cluster_id = 3;
    // Name of the cluster.
    string name = 4;
    // Hostname of the cluster master.
    string hostname = 5;
    // ControlPlaneHostname with the hostname to access K8s API.
    string control_plane_hostname = 6;
    // Labels for the cluster.
    map <string, string> labels = 7;
}

message RemoveClusterRequest {
    string request_id = 1;
    // OrganizationId with the organization identifier.
    string organization_id = 2;
    // ClusterId with the cluster identifier.
    string cluster_id = 3;
}

// UpdateClusterRequest to update different fields of the Cluster.
message UpdateClusterRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // ClusterId with the cluster identifier.
    string cluster_id = 2;
    // UpdateName flag to determine if the name needs to be changed.
    bool update_name = 3;
    // Name of the cluster.
    string name = 4;
    // UpdateHostname flag to determine if the hostname needs to be updated.
    bool update_hostname = 5;
    // Hostname of the cluster master.
    string hostname = 6;
    // Add Label flag to indicate that the set of labels need to be added.
    bool add_labels = 7;
    // Remove label flag to indicate that the set of labels need to be removed.
    bool remove_labels = 8;
    // Labels for the cluster.
    map <string, string> labels = 9;
    // UpdateStatus flag to determine if the status needs to be updated.
    bool update_status = 10;
    // Status of the cluster based on monitoring information.
    connectivity_manager.ClusterStatus status = 11;
    // Update the clusterwatch information
    bool update_cluster_watch = 12;
    // ClusterWatchInformation to be updated
    cluster_watcher.ClusterWatchInfo clusterWatchInfo = 13;
    // UpdateLastClusterTimestamp indicates that the timestamp should be updated.
    bool update_last_cluster_timestamp = 14;
    // LastClusterTimestamp with the new timestamp value.
    int64 last_cluster_timestamp = 15;
    // UpdateClusterState indicates that the state of the cluster should be updated.
    bool update_cluster_state = 16;
    // State of the cluster.
    ClusterState state = 17;
    // UpdateControlPlaneHostname to determine if the control plane hostname needs to be updated
    bool update_control_plane_hostname = 18;
    // Hostname of the control plane
    string control_plane_hostname = 19;
}

message ClusterList {
    repeated Cluster clusters = 1;
}

// Node entity representing a single node of the architecture that executes application instances.
message Node {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // ClusterId with the associated cluster identifier the node is assigned to.
    string cluster_id = 2;
    // Id with the node identifier.
    string node_id = 3;
    // Ip with the node IP.
    string ip = 4;
    // Labels for the node.
    map<string, string> labels = 5;
    // Status of the node based on monitoring information.
    InfraStatus status = 6;
    // State of assignation of the node.
    NodeState state = 7;
}

// AddNodeRequest message to add a new node in the system
message AddNodeRequest {
    string request_id = 1;
    // OrganizationId with the organization identifier.
    string organization_id = 2;
    // Id with the node identifier.
    string node_id = 3;
    // Ip with the node IP.
    string ip = 4;
    // Labels for the node.
    map<string, string> labels = 5;
}

// AttachNodeRequest message to attach a new node into a cluster
message AttachNodeRequest {
    string request_id = 1;
    // OrganizationId with the organization identifier.
    string organization_id = 2;
    // ClusterId with the associated cluster identifier the node is assigned to.
    string cluster_id = 3;
    // Id with the node identifier.
    string node_id = 4;
}

// RemoveNodesRequest removes a list of nodes from an organization
message RemoveNodesRequest {
    string request_id = 1;
    string organization_id = 2;
    repeated string nodes = 3;
}

message NodeList {
    repeated Node nodes = 1;
}

// UpdateNodeRequest to update different fields of the Node.
message UpdateNodeRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // Id with the node identifier.
    string node_id = 2;
    // Add Label flag to indicate that the set of labels need to be added.
    bool add_labels = 9;
    // Remove label flag to indicate that the set of labels need to be removed.
    bool remove_labels = 10;
    // Labels for the cluster.
    map <string, string> labels = 4;
    // UpdateStatus flag to determine if the status needs to be updated.
    bool update_status = 5;
    // Status of the cluster based on monitoring information.
    InfraStatus status = 6;
    // UpdateState flag to determine if the state needs to be updated.
    bool update_state = 7;
    // State of the node
    NodeState state = 8;
}