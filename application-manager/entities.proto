/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package application_manager;
option go_package = "github.com/nalej/grpc-application-manager-go";

import "application/entities.proto";
import "application-network/entities.proto";

message ConnectionRequest {
    // TargetInstanceId with the identifier of the inbound instance
    string target_instance_id = 1;
    // TargetInboundName with the name of the inbound identifier
    string target_inbound_name = 2;
    // SourceOutboundName with the name of the outbound identifier
    string source_outbound_name = 3;
}

// DeployRequest contains a message to deploy an application descriptor
message DeployRequest{
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // AppDescriptorID with the application descriptor identifier
    string app_descriptor_id = 2;
    // Deploy Name
    string name = 3;
    // Parameters with a list of values ​​that the parameters in this deployment will take
    application.InstanceParameterList parameters = 4;
    // OutboundConnections with a list of connections to be established in the deployment
    repeated ConnectionRequest outbound_connections = 5;
}
// Undeploy
message UndeployRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 2;
    // UserConfirmation is a flag required to undeploy an instance that has inbounds connections
    bool user_confirmation = 3;
}

// ApplicationFilter allows the device to request the set of available application setting filters.
message ApplicationFilter{
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // DeviceGroupId with the Identifier of the target device group. Required for security purposes
    string device_group_id = 2;
    // DeviceGroupName with the name of the target device group. Required for security purposes.
    // it will be checked that the device_id of the device_group_name and the device_group_id are the same
    string device_group_name = 3;
    // Match labels contains the set of labels that should be matched against available applications.
    map<string, string> match_labels = 4;
}

// TargetApplication retrieves the list of labels in a given application instance. This is provided as to
// give the device extra options for local filtering.
message TargetApplication {
    // AppInstanceId with the application instance identifier
    string app_instance_id = 1;
    // Labels to filter
    map<string, string> labels = 2;
}

// TargetApplicationList contains the applications the device should send information to.
message TargetApplicationList{
    // List of application instance identifiers assocaited with the set of labels.
    repeated TargetApplication applications = 1;
}

// RetrieveEndpointsRequest message to ask for the endpoints of a given application instance
message RetrieveEndpointsRequest{
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // AppInstanceId with the target application instance.
    string app_instance_id = 2;
}

// ApplicationClusterEndpoints contains the endpoints info of and application instance
message ApplicationClusterEndpoints{
    // DeviceControllerURL with the URL the device controller is exposed on the target application cluster.
    string device_controller_url = 1;
    // Endpoints available on the given application cluster.
    repeated application.EndpointInstance endpoints = 2;
}
// ApplicationEndpoints message with a list of ApplicationEndpoints
message ApplicationEndpoints{
    // ClusterEndpoints with the list of cluster and associated endpoints an application instance is available.
    repeated ApplicationClusterEndpoints cluster_endpoints = 2;
}

// Deployment response has the resulting execution of a deployment process.
message DeploymentResponse {
    string request_id = 1;
    // ID of the deployed instance
    string app_instance_id = 2;
    // Status for this application. The first request will probably return a QUEUED status.
    application.ApplicationStatus status = 3;
}

// AvailableInstanceInbound represent an available inbound
message AvailableInstanceInbound{
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // appInstanceId with the instance identifier
    string app_instance_id = 2;
    // InstanceName withe the name of the instance
    string instance_name = 3;
    // InboundName with the name of the inbound interface
    string inbound_name = 4;
}

// AvailableInstanceInboundList list of AvailableInstanceInbound
message AvailableInstanceInboundList {
    repeated AvailableInstanceInbound instance_inbounds = 1;
}

// AvailableInstanceOutbound represent an available outbound
message AvailableInstanceOutbound{
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // appInstanceId with the instance identifier
    string app_instance_id = 2;
    // InstanceName withe the name of the instance
    string instance_name = 3;
    // OutboundName with the name of the outbound interface
    string outbound_name = 4;
}

// AvailableInstanceOutboundList list of AvailableInstanceOutbound
message AvailableInstanceOutboundList {
    repeated AvailableInstanceOutbound instance_outbounds = 1;
}

// AppInstance represents an instance of the application in the system.
message AppInstance {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 3;
    // Name of the application.
    string name = 4;
    // ConfigurationOptions defines a key-value map of configuration options.
    map<string, string> configuration_options = 5;
    // EnvironmentVariables defines a key-value map of environment variables and values that will be passed to all
    // running services.
    map<string, string> environment_variables = 6;
    // Labels defined by the user.
    map<string, string> labels = 7;
    // Rules that define the connectivity between the elements of an application.
    repeated application.SecurityRule rules = 8;
    // Groups with the Service collocation strategies.
    repeated application.ServiceGroupInstance groups = 9;
    // Status of the deployed instance.
    application.ApplicationStatus status = 10;
    // Metadata descriptor for the instances triggered by this app
    repeated application.InstanceMetadata metadata = 11;
    // Textual information about this particular application instance
    string info = 12;
    // InboundNetInterfaces with a list of inbounds
    repeated application.InboundNetworkInterface inbound_net_interfaces = 13;
    // OutboundNetInterfaces with a list of outbounds
    repeated application.OutboundNetworkInterface outbound_net_interfaces = 14;
    // InboundConnections with a list of connections where the instance is the target
    repeated application_network.ConnectionInstance inbound_connections = 15;
    // OutboundConnections with a list of connections where the instance is the source
    repeated application_network.ConnectionInstance outbound_connections = 16;

}

// list of application instances
message AppInstanceList {
    repeated AppInstance instances = 1;
}

// --------------------------------
// Unified Logging
// --------------------------------

// SearchRequest message with the query to be resolved.
message SearchRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the descriptor identifier
    string app_descriptor_id = 2;
    // AppInstanceId with the identifier of the target application instance.
    string app_instance_id = 3;
    // ServiceGroupId with the service group identifier we asked for
    string service_group_id = 4;
    // ServiceGroupInstanceId with the target group instance. If not set, the response will contain all groups in
    // the application instance.
    string service_group_instance_id = 5;
    // ServiceId with the service identifier we asked for
    string service_id = 6;
    // ServiceInstanceId with the service instance identifier we asked for
    string service_instance_id = 7;
    // MsgQueryFilter contains a text query on the log entry.
    string msg_query_filter = 8;
    // From specifies the minimal timestamp of the expected entries.
    int64 from = 9;
    // To specifies the maximum timestamp of the expected entries.
    int64 to = 10;
    // IncludeMetadata  flag to indicate if the result should not be augmented by adding names, etc.
    bool include_metadata = 11;
    // NFirst is a flag that identifies whether the user expects to receive the first n results or not
    // if the search must be sorted ascending or descending
    bool n_first = 12;
}

// LogResponse message containing the results of a query.
message LogResponse {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // From with the minimal timestamp of the returned results.
    int64 from = 2;
    // To with the maximum timestamp of the returned results.
    int64 to = 3;
    // Entries with the captured log entries.
    repeated LogEntryResponse entries = 4;
    // AppDescriptorLogSummary contains an array with the log summary of an app descriptor
    repeated AppDescriptorLogSummary app_descriptor_log_summary = 5;
    // AppInstanceLogSummary contains an array with the log summary of an app instance
    repeated AppInstanceLogSummary app_instance_log_summary = 6;
    // FailedClusterIds with a list of cluster identifiers ∫that failed to request the logs
    repeated string failed_cluster_ids = 7;
}

// LogEntryResponse message containing a log entry
message LogEntryResponse {
    // AppDescriptorId with the descriptor identifier
    string app_descriptor_id = 1;
    // AppDescriptorName with the descriptor name
    string app_descriptor_name = 2;
    // AppInstanceId with the identifier of the target application instance.
    string app_instance_id = 3;
    // AppInstanceName wit the name of the instance
    string app_instance_name = 4;
    // ServiceGroupId with the service group identifier
    string service_group_id = 5;
    // ServiceGroupInstanceId with the target group instance. If not set, the response will contain all groups in
    // the application instance.
    string service_group_instance_id = 6;
    // ServiceGroupName withe the name of the service group
    string service_group_name = 7;
    // ServiceId with the service identifier
    string service_id = 8;
    // ServiceInstanceId with the service instance identifier
    string service_instance_id = 9;
    // ServiceName with the name of the service
    string service_name = 10;
    // Timestamp
    int64 timestamp = 11;
    // Msg contains the log entry.
    string msg = 12;
    // IsDead means that the service is not longer deployed
    bool is_dead =13;
}

// Request to be send to get the Catalog
message AvailableLogRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // From contains the timestamp from which a service instance was available
    int64 from = 2;
    // To contains the timestamp to which a service instance was available
    int64 to = 3;
}

// Response to a Catalog request
message AvailableLogResponse {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorLogSummary contains an array with the log summary of an app descriptor
    repeated AppDescriptorLogSummary app_descriptor_log_summary = 2;
    // AppInstanceLogSummary contains an array with the log summary of an app instance
    repeated AppInstanceLogSummary app_instance_log_summary = 3;
    // From contains the timestamp from which a service instance was available
    int64 from = 4;
    // To contains the timestamp to which a service instance was available
    int64 to = 5;
}

// AppDescriptorLogSummary contains a summary of the logs by app descriptor
message AppDescriptorLogSummary {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // Name of the application descriptor.
    string app_descriptor_name = 3;
    // CurrentLabels defined by the user.
    map<string, string> current_labels = 4;
    // Instances contains a list of instances created from this descriptor
    repeated AppInstanceLogSummary instances = 5;
}

// AppInstanceLogSummary contains a summary of the logs by app instance
message AppInstanceLogSummary {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppInstanceID with the identifier of the instance associated to this descriptor
    string app_instance_id = 2;
    // AppInstanceName contains the name of the application instance.
    string app_instance_name = 3;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 4;
    // ApplDescriptorName contains the name of the application descriptor.
    string app_descriptor_name = 5;
    // CurrentLabels defined by the user.
    map<string, string> current_labels = 6;
    // Groups contains a list of service group instance log summaries
    repeated ServiceGroupInstanceLogSummary groups = 7;
}

// ServiceGroupInstanceLogSummary contains a summary of the logs by service group instance
message ServiceGroupInstanceLogSummary {
    // ServiceGroupId with the service group identifier
    string service_group_id = 1;
    // ServiceGroupInstanceId with the service group instance identifier
    string service_group_instance_id = 2;
    // Name of this service group instance log summary
    string name = 3;
    // ServiceInstances contains a list of service instance log summaries
    repeated ServiceInstanceLogSummary service_instances = 4;
}

// ServiceInstanceLogSummary contains a summary of the logs by service instance
message ServiceInstanceLogSummary {
    // ServiceId with the service identifier
    string service_id = 1;
    // ServiceInstanceId with the service instance identifier
    string service_instance_id = 2;
    // Name of the service instance log summary
    string name = 3;
}