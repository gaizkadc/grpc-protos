/*
 * Copyright (C) 2018 Nalej Group - All Rights Reserved
 */



syntax = "proto3";

package deployment_manager;
option go_package = "github.com/nalej/grpc-deployment-manager-go";

import "deployment-manager/entities.proto";
import "network/entities.proto";
import "common/entities.proto";

service DeploymentManager {
    // Request a deployment plan to be executed.
    rpc Execute(DeploymentFragmentRequest) returns (DeploymentFragmentResponse) {}
    // Request to undeploy an application
    rpc Undeploy(UndeployRequest) returns (common.Success) {}
    // Request to undeploy a fragment
    rpc UndeployFragment(UndeployFragmentRequest) returns (common.Success) {}
}

// Services regarding network management on the pods side. In particular, these services are designed to be
// invoked by zt-agents.
service DeploymentManagerNetwork {
    // A pod requests authorization to join a ZT Network
    rpc AuthorizeNetworkMembership(AuthorizeNetworkMembershipRequest) returns(common.Success) {}
    // SetServiceRoute setups an iptables DNAT for a given service
    rpc SetServiceRoute(ServiceRoute) returns (common.Success){}
}

// Services controlling the declaration of new proxies for an application. The information will be forwarded
// from the cluster app to the manager app accordingly.
service ApplicationProxy{
    // RegisterInboundServiceProxy operation to update rules based on new service proxy being created.
    rpc RegisterInboundServiceProxy(network.InboundServiceProxy) returns (common.Success){}
    // RegisterOutboundProxy operation to retrieve existing networking rules.
    rpc RegisterOutboundProxy(network.OutboundService) returns (common.Success){}
}