/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package deployment_manager;
option go_package = "github.com/nalej/grpc-deployment-manager-go";

import "deployment-manager/entities.proto";
import "network/entities.proto";
import "common/entities.proto";

service DeploymentManager {
    // Request a deployment plan to be executed.
    rpc Execute(DeploymentFragmentRequest) returns (DeploymentFragmentResponse) {}
    // Request to undeploy an application
    rpc Undeploy(UndeployRequest) returns (common.Success) {}
    // Request to undeploy a fragment
    rpc UndeployFragment(UndeployFragmentRequest) returns (common.Success) {}
}

// Services regarding network management on the pods side. In particular, these services are designed to be
// invoked by zt-agents.
// It also includes services related to the appnet, messages that will be sent to the zt-agents
service DeploymentManagerNetwork {
    // A pod requests authorization to join a ZT Network
    rpc AuthorizeNetworkMembership(AuthorizeNetworkMembershipRequest) returns(common.Success) {}
    // Request the creation of a new network entry
    rpc RegisterNetworkEntry(RegisterNetworkEntryRequest) returns(common.Success) {}
    // SetServiceRoute setups an iptables DNAT for a given service
    rpc SetServiceRoute(ServiceRoute) returns (common.Success){}
    // AuthorizeZTConnection A pod requests authorization to join a secondary ZT Network
    rpc AuthorizeZTConnection(network.AuthorizeZTConnectionRequest) returns(common.Success) {}
    // JoinZTNetwork message to Request a zt-agent to join into a new Network
    rpc JoinZTNetwork(JoinZTNetworkRequest) returns (common.Success) {}
    // LeaveZTNetwork message to request a zt-agent to leave a zero tier network
    rpc LeaveZTNetwork(LeaveZTNetworkRequest) returns(common.Success) {}

}

// Services controlling the declaration of new proxies for an application. The information will be forwarded
// from the cluster app to the manager app accordingly.
service ApplicationProxy{
    // RegisterInboundServiceProxy operation to update rules based on new service proxy being created.
    rpc RegisterInboundServiceProxy(network.InboundServiceProxy) returns (common.Success){}
    // RegisterOutboundProxy operation to retrieve existing networking rules.
    rpc RegisterOutboundProxy(network.OutboundService) returns (common.Success){}
    // RegisterZTConnection operation to indicate that the inbound or outbound  are within the ztNetwork
    rpc RegisterZTConnection(network.RegisterZTConnectionRequest) returns (common.Success){}
}

// These services will be used when a cluster goes offline and a policy is triggered
service OfflinePolicy {
    // Operation to remove all the instances in an application cluster regardless of Conductor
    rpc RemoveAll (common.Empty) returns (common.Success) {}
}