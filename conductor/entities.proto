/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package conductor;
option go_package = "github.com/nalej/grpc-conductor-go";

import "application/entities.proto";
import "application-network/entities.proto";
import "infrastructure/entities.proto";
import "google/protobuf/timestamp.proto";


// --------------------------
// Conductor services



// Data structure defining a deployment plan for Nalej applications.
message DeploymentPlan {
   // Id for this plan
   string deployment_id = 1;
   // Organization id
   string organization_id = 2;
   // Application instanceId
   string app_instance_id = 3;
   // Stages to be followed in the deployment
   repeated DeploymentFragment fragments = 4;
}

// Fragment of a data plan to be deployed in a cluster.
message DeploymentFragment {
   // Organization id
   string organization_id = 1;
   // Organization name, particularly useful when creating human-readable naming
   string organization_name = 2;
   // Application descriptor id
   string app_descriptor_id = 3;
   // AppDescriptorName with the name of the descriptor
   string app_descriptor_name = 4;
   // Application instance
   string app_instance_id = 5;
   // Application name for human-readable instances
   string app_instance_name = 6;
   // Id of the plan this fragment belongs to
   string deployment_id = 7;
   // Id of this fragment
   string fragment_id = 8;
   // Cluster Id of the cluster to deploy this fragment
   string cluster_id = 9;
   // Nalej variables for this deployment
   map<string,string> nalej_variables = 10;
   // Stages to be deployed
   repeated DeploymentStage stages = 11;
}

// ServiceInstance contains the information of an instance of a service
// This message is an extension of the application.service
// Contains fields for the names of service_group, service, etc.
message ServiceInstance {
   // OrganizationId with the organization identifier.
   string organization_id = 1;
   // AppDescriptorId with the application descriptor identifier.
   string app_descriptor_id = 2;
   // AppInstanceId with the application instance identifier.
   string app_instance_id = 3;
   // ServiceGroupId with the group identifier.
   string service_group_id = 4;
   // ServiceGroupName with the name of the service_group
   string service_group_name = 5;
   // ServiceGroupInstanceId with the service group instance identifier.
   string service_group_instance_id = 6;
   // ServiceId with the service identifier.
   string service_id = 7;
   // ServiceName with the name of the service
   string service_name = 8;
   // Unique identifier for this instance
   string service_instance_id = 9;
   // ServiceType represents the underlying technology of the service to be launched.
   application.ServiceType type = 10;
   // Image contains the URL/name of the image to be executed.
   string image = 11;
   // ImageCredentials with the data required to access the repository the image is available at.
   application.ImageCredentials credentials = 12;
   // DeploySpecs with the resource specs required by the service.
   application.DeploySpecs specs = 13;
   // Storage restrictions
   repeated application.Storage storage = 14;
   // ExposedPorts contains the list of ports exposed by the current service.
   repeated application.Port exposed_ports = 15;
   // EnvironmentVariables defines a key-value map of environment variables and values that will be passed to all
   // running services.
   map<string, string> environment_variables = 16;
   // Configs contains the configuration files required by the service.
   repeated application.ConfigFile configs = 17;
   // Labels with the user defined labels.
   map<string, string> labels = 18;
   // DeployAfter contains the list of services that must be running before launching a service.
   repeated string deploy_after = 19;
   // Status of the deployed service
   application.ServiceStatus status = 20;
   // Endpoints instances exposing content to the users in his service.
   repeated application.EndpointInstance endpoints = 21;
   // DeployedOnClusterId specifies which is the cluster where the service is running.
   string deployed_on_cluster_id = 22;
   // Run arguments
   repeated string run_arguments = 23;
   // Relevant information about this instance
   string info = 24;
}

// A stage represents a collection of services and related components that can be deployed
// without any dependency.
message DeploymentStage {
   // Fragment id this stage belongs to
   string fragment_id = 1;
   // Id for this stage
   string stage_id = 2;
   // Collection of services that can be simultaneously deployed
   repeated ServiceInstance services = 3;
   // DeviceGroupRules with the security rules affecting device group access.
   repeated DeviceGroupSecurityRuleInstance device_group_rules = 4;
   // PublicRules with the security rules related to public access of a given endpoint.
   repeated PublicSecurityRuleInstance public_rules = 5;
}

message PublicSecurityRuleInstance {
   // OrganizationId with the organization identifier.
   string organization_id = 1;
   // AppDescriptorId with the application descriptor identifier.
   string app_descriptor_id = 2;
   // RuleId with the security rule identifier.
   string rule_id = 3;
   // TargetServiceGroupId with the group identifier as provided by the user.
   string target_service_group_id = 4;
   // TargetServiceGroupInstanceId with the group identifier provided by the system.
   string target_service_group_instance_id = 5;
   // TargetServiceId with the service identifier as provided by the user.
   string target_service_id = 6;
   // TargetServiceInstanceId with the service identifier as provided by the system.
   string target_service_instance_id = 7;
   // TargetPort defining the port that is affected by the current rule.
   int32 target_port = 8;
   // ServiceName name of the service that is linked
   string service_name = 9;
}

// DeviceGroupSecurityRuleInstance defining which device groups may access a given service.
message DeviceGroupSecurityRuleInstance {
   // OrganizationId with the organization identifier.
   string organization_id = 1;
   // AppDescriptorId with the application descriptor identifier.
   string app_descriptor_id = 2;
   // RuleId with the security rule identifier.
   string rule_id = 3;
   // TargetServiceGroupId with the group identifier as provided by the user.
   string target_service_group_id = 4;
   // TargetServiceGroupInstanceId with the group identifier provided by the system.
   string target_service_group_instance_id = 5;
   // TargetServiceId with the service identifier as provided by the user.
   string target_service_id = 6;
   // TargetServiceInstanceId with the service identifier as provided by the system.
   string target_service_instance_id = 7;
   // TargetPort defining the port that is affected by the current rule.
   int32 target_port = 8;
   // DeviceGroupIds with the identifiers of the device groups that have access to the service.
   repeated string device_group_ids = 12;
   // DeviceGroupJWTSecrets with the secrets of those groups so that JWT can be enforced by the apps.
   repeated string device_group_jwt_secrets = 13;
}


// DeploymentRequest contains all the information required by conductor to start a deployment.
message DeploymentRequest {
   string request_id = 1;
   // ID of the instance to deploy
   application.AppInstanceId app_instance_id = 2;
   // Name for the deployment
   string name = 3;
   // Number of retries.
   // Internal field. Only conductor modifies this value.
   int32 num_retries = 4;
   // Time last retry
   // Internal field. Only conductor modifies this value.
   google.protobuf.Timestamp time_retry = 5;
   // OutboundConnections with a list of connections to be established in the deployment
   repeated application_network.ConnectionInstance outbound_connections = 6;
}


// Request to undeploy an already deployed application
message UndeployRequest {
   // Organization ID
   string organization_id = 1;
   // App Instance ID
   string app_instance_id = 2;
}

// Request for a cluster to evaluate a set of requirements.
message ClusterScoreRequest {
   // RequestId identifier for this request
   string request_id = 1;
   // Requirements set of requirements for the application
   repeated Requirement requirements = 2;
}

// A requirement of resources for a certain service.
message Requirement {
   // RequestId identifier for this request
   string request_id = 1;
   // Application instance id
   string app_instance_id = 2;
   // Group service instance id
   string group_service_instance_id = 3;
   // CPU required
   int64 cpu = 4;
   // Memory required
   int64 memory = 5;
   // Storage required
   int64 storage = 6;
   // Replicas required
   int32 replicas = 7;
}


// Response when clusters are queried for their corresponding scores.
message ClusterScoreResponse {
   // Request id
   string request_id = 1;
   // ClusterId identifying this cluster
   string cluster_id = 2;
   // Score for different combinations of deployments
   repeated DeploymentScore score = 3;
}

// Score for the deployment of a collection of group instances.
message DeploymentScore {
   // Application instance id
   string app_instance_id = 1;
   // List of groups to be deployed together
   repeated string group_service_instances = 2;
   // The score associated with the list of services mentioned above
   float score = 3;
}


// --------------------------
// Conductor Monitor services

message DeploymentFragmentUpdateRequest {
   // organization id
   string organization_id = 1;
   // plan deployment id
   string deployment_id = 3;
   // fragment id
   string fragment_id = 4;
   // app instance id
   string app_instance_id = 5;
   // cluster id
   string cluster_id = 6;
   // Status of the fragment operation
   DeploymentFragmentStatus status = 7;
   // Textual information important to understand this status update
   string info = 8;
}

// Set of possible statuses for a deployment fragment
enum DeploymentFragmentStatus {
   WAITING = 0;
   DEPLOYING = 1;
   DONE = 2;
   ERROR = 3;
   RETRYING = 4;
   TERMINATING = 5;
   TERMINATED = 6;
}

// Status of a service to update
message ServiceUpdate {
   // Organization this service belongs to
   string organization_id = 1;
   // Application
   string application_id = 2;
   // Application instance
   string application_instance_id = 3;
   // Group
   string service_group_id = 4;
   // Service group instance
   string service_group_instance_id =5;
   // Service id
   string service_id = 6;
   // Service name
   string service_name = 7;
   // Instance of this service
   string service_instance_id = 8;
   // ClusterId where the service is deployed
   string cluster_id = 9;
   // The current status of the service
   application.ServiceStatus status = 10;
   // Endpoints exposed through ingresses.
   repeated application.EndpointInstance endpoints = 11;
   // Textual information important to understand this status update
   string info = 12;
}

// Indicate the status of a set of services
message DeploymentServiceUpdateRequest {
   // Organization this service belongs to
   string organization_id = 1;
   // fragment we are working with
   string fragment_id = 2;
   // cluster id
   string cluster_id = 3;
   // status
   repeated ServiceUpdate list = 4;
}

// Indicate the drain of a cluster
message DrainClusterRequest {
   // ClusterID
   infrastructure.ClusterId cluster_id = 1;
   // ClusterOffline will be set to true when a Cluster's status is Offline or OfflineCordon
   bool ClusterOffline = 2;
}