/*
* Copyright (C) 2018 Nalej Group - All Rights Reserved
*/


syntax = "proto3";

package conductor;
option go_package = "github.com/nalej/grpc-conductor-go";

import public "application/entities.proto";
import public "infrastructure/entities.proto";
import "google/protobuf/timestamp.proto";


// --------------------------
// Conductor services

// Data structure defining a deployment plan for Nalej applications.
message DeploymentPlan {
   // Id for this plan
   string deployment_id = 1;
   // Organization id
   string organization_id = 2;
   // Application instanceId
   string app_instance_id = 3;
   // Stages to be followed in the deployment
   repeated DeploymentFragment fragments = 4;
}

// Fragment of a data plan to be deployed in a cluster.
message DeploymentFragment {
   // Organization id
   string organization_id = 1;
   // Organization name, particularly useful when creating human-readable naming
   string organization_name = 2;
   // Application instance
   string app_instance_id = 3;
   // Application name for human-readable instances
   string app_name = 4;
   // Id of the plan this fragment belongs to
   string deployment_id = 5;
   // Id of this fragment
   string fragment_id = 6;
   // Cluster id where this fragment must be executed
   repeated DeploymentStage stages = 7;
}

// A stage represents a collection of services and related components that can be deployed
// without any dependency.
message DeploymentStage {
   // Fragment id this stage belongs to
   string fragment_id = 1;
   // Id for this stage
   string stage_id = 2;
   // Collection of applications that can be simultaneously deployed
   repeated application.Service services = 3;
}


// DeploymentRequest contains all the information required by conductor to start a deployment.
message DeploymentRequest {
   string request_id = 1;
   // ID of the application to deploy
   application.AppDescriptorId app_id = 2;
   // Name for the deployment
   string name = 3;
   // Description for this deployment
   string description = 4;
   // Number of retries
   int32 num_retries = 5;
   // Time last retry
   google.protobuf.Timestamp time_retry = 6;

}

// Deployment response has the resulting execution of a deployment process.
message DeploymentResponse {
   string request_id = 1;
   // ID of the deployed instance
   string app_instance_id = 2;
   // Status for this application. The first request will probably return a QUEUED status.
   application.ApplicationStatus status = 3;
}

// Request to undeploy an already deployed application
message UndeployRequest {
   // Organization ID
   string organization_id = 1;
   // App Instance ID
   string app_instance_id = 2;
}

// Request for a cluster to evaluate a set of requirements.
message ClusterScoreRequest {
   // RequestId identifier for this request
   string request_id = 1;
   // AppInstanceId the application this requirements refer to
   string app_instance_id = 2;
   // Requirements set of requirements for the application
   repeated Requirement requirements = 3;
}

// A requirement of resources for a certain service.
message Requirement {
   // ServiceId id of the application to be deployed
   string service_id = 1;
   // CPU required
   int64 cpu = 2;
   // Memory required
   int64 memory = 3;
   // Storage required
   int64 storage = 4;
   // Replicas required
   int32 replicas = 5;
}


// Response when clusters are queried for their corresponding scores.
message ClusterScoreResponse {
   // RequestId
   string request_id = 1;
   // ClusterId identifying this cluster
   string cluster_id = 2;
   // Score for the set of requirements
   float score = 3;
}

// --------------------------
// Conductor Monitor services

message DeploymentFragmentUpdateRequest {
   // organization id
   string organization_id = 1;
   // plan deployment id
   string deployment_id = 3;
   // fragment id
   string fragment_id = 4;
   // app instance id
   string app_instance_id = 5;
   // cluster id
   string cluster_id = 6;
   // Status of the fragment operation
   DeploymentFragmentStatus status = 7;
}

// Set of possible statuses for a deployment fragment
enum DeploymentFragmentStatus {
   WAITING = 0;
   DEPLOYING = 1;
   DONE = 2;
   ERROR = 3;
   RETRYING = 4;
}

// Status of a service to update
message ServiceUpdate {
   // Organization this service belongs to
   string organization_id = 1;
   // Application instance
   string application_instance_id = 2;
   // Instance of this service
   string service_instance_id = 3;
   // ClusterId where the service is deployed
   string cluster_id = 4;
   // The current status of the service
   application.ServiceStatus status = 5;
   // Endpoints exposed through ingresses.
   repeated string endpoints = 6;
}

// Indicate the status of a set of services
message DeploymentServiceUpdateRequest {
   // Organization this service belongs to
   string organization_id = 1;
   // fragment we are working with
   string fragment_id = 2;
   // cluster id
   string cluster_id = 3;
   // status
   repeated ServiceUpdate list = 4;
}

