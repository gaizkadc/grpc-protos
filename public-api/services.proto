/*
 * Copyright (C) 2018 Nalej - All Rights Reserved
 */

syntax = "proto3";

package public_api;
option go_package = "github.com/nalej/grpc-public-api-go";

import "public-api/entities.proto";
import "organization/entities.proto";
import "user/entities.proto";
import "common/entities.proto";
import "infrastructure/entities.proto";
import "application/entities.proto";
import "application-manager/entities.proto";
import "infrastructure-manager/entities.proto";
import "user-manager/entities.proto";
import "device-manager/entities.proto";
import "device/entities.proto";
import "unified-logging/entities.proto";
import "monitoring/entities.proto";
import "google/api/annotations.proto";
import "inventory-manager/entities.proto";
import "inventory/entities.proto";

// Organization related information.
service Organizations {
    // Info returns the information about a given organization.
    rpc Info(organization.OrganizationId) returns(OrganizationInfo){
        option (google.api.http) = {
            get: "/v1/organization/{organization_id}"
        };
    }
}

// Cluster related information.
// TODO Migrate InstallResponse response to user friendly enums for the front.
service Clusters {
    // Install a new cluster adding it to the system.
    rpc Install(InstallRequest) returns (infrastructure_manager.InstallResponse){
        option (google.api.http) = {
            post: "/v1/clusters/{organization_id}/install"
            body: "*"
        };
    }

    // Info retrieves the cluster information.
    rpc Info(infrastructure.ClusterId) returns (Cluster) {
        option (google.api.http) = {
            get: "/v1/clusters/{organization_id}/{cluster_id}/info"
        };
    }

    // List all the clusters in an organization.
    rpc List(organization.OrganizationId) returns(ClusterList){
        option (google.api.http) = {
            get: "/v1/clusters/{organization_id}/list"
        };
    }
    // Update the cluster information.
    rpc Update(UpdateClusterRequest) returns (Cluster){
        option (google.api.http) = {
            post: "/v1/clusters/{organization_id}/{cluster_id}/update"
            body: "*"
        };
    }

    // Retrieve a summary of high level cluster resource availability
    rpc Monitor(monitoring.ClusterSummaryRequest) returns(monitoring.ClusterSummary) {
        option (google.api.http) = {
            post: "/v1/clusters/{organization_id}/{cluster_id}/monitor"
            body: "*"
        };
    }

    rpc Cordon(infrastructure.ClusterId) returns (common.Success) {
        option (google.api.http) = {
            post: "/v1/clusters/{organization_id}/{cluster_id}/cordon"
            body: "*"
        };
    }

    rpc Uncordon(infrastructure.ClusterId) returns (common.Success) {
        option (google.api.http) = {
            post: "/v1/clusters/{organization_id}/{cluster_id}/uncordon"
            body: "*"
        };
    }

    rpc Drain(infrastructure.ClusterId) returns (common.Success) {
        option (google.api.http) = {
            post: "/v1/clusters/{organization_id}/{cluster_id}/drain"
            body: "*"
        };
    }
    
}

// Node related information.
service Nodes {
    // List retrieves information about the nodes of a cluster.
    rpc List(infrastructure.ClusterId) returns(NodeList){
        option (google.api.http) = {
            get: "/v1/nodes/{organization_id}/{cluster_id}/list"
        };
    }
    // UpdateNode allows the user to update the information of a node.
    rpc UpdateNode(UpdateNodeRequest) returns (Node) {
        option (google.api.http) = {
            post: "/v1/nodes/{organization_id}/{node_id}/update"
            body: "*"
        };
    }
}

// Operations on device groups and devices.
service Devices {
    // add a new device group in an organization
    rpc AddDeviceGroup(device_manager.AddDeviceGroupRequest) returns (device_manager.DeviceGroup){
        option (google.api.http) = {
            post: "/v1/device/group/{organization_id}/add"
            body: "*"
        };
    }
    // UpateDeviceGroup allows to update the deviceGroup configuration
    rpc UpdateDeviceGroup(device_manager.UpdateDeviceGroupRequest) returns (device_manager.DeviceGroup){
        option (google.api.http) = {
            post: "/v1/device/group/{organization_id}/update"
            body: "*"
        };
    }
    // RemoveDeviceGroup removes a device group of an organization from the system
    rpc RemoveDeviceGroup(device.DeviceGroupId) returns (common.Success){
        option (google.api.http) = {
            post: "/v1/device/group/{organization_id}/remove"
            body: "*"
        };
    }
    // ListDeviceGroups retrieves the device groups information of an organization
    rpc ListDeviceGroups(organization.OrganizationId) returns (device_manager.DeviceGroupList){
        option (google.api.http) = {
            get: "/v1/device/group/{organization_id}/list"
        };
    }
    // ListDevices retrieves the device information of a device group
    rpc ListDevices(device.DeviceGroupId) returns (DeviceList){
        option (google.api.http) = {
            get: "/v1/device/{organization_id}/{device_group_id}/list"
        };
    }
    // GetDevice retrieves a device from a device ID
    rpc GetDevice (device.DeviceId) returns (Device){
        option (google.api.http) = {
            get: "/v1/device/{organization_id}/{device_group_id}/{device_id}/get"
        };
    }
    // AddLabelToDevice allows the user to add labels to a device
    rpc AddLabelToDevice(device_manager.DeviceLabelRequest) returns (common.Success){
        option (google.api.http) = {
            post: "/v1/device/{organization_id}/label/add"
            body: "*"
        };
    }
    // RemoveLabelFromDevice allows the user to remove labels to a device
    rpc RemoveLabelFromDevice(device_manager.DeviceLabelRequest) returns (common.Success){
        option (google.api.http) = {
            post: "/v1/device/{organization_id}/label/remove"
            body: "*"
        };
    }
    // UpdateDevice allows the user to enable/disable a device
    rpc UpdateDevice(device_manager.UpdateDeviceRequest) returns (Device){
        option (google.api.http) = {
            post: "/v1/device/{organization_id}/update"
            body: "*"
        };
    }
    // RemoveDevice allows to remove a device from the system
    rpc RemoveDevice(device.DeviceId) returns (common.Success){
        option (google.api.http) = {
            post: "/v1/device/{organization_id}/remove"
            body: "*"
        };
    }
}

// Resource level related information.
service Resources {
    // Summary provides an overview of the resources inside an organization.
    rpc Summary(organization.OrganizationId) returns(ResourceSummary){
        option (google.api.http) = {
            get: "/v1/resources/{organization_id}/summary"
        };
    }
}

// Inventory monitoring
service InventoryMonitoring {
    // ListMetrics returns available metrics for a certain selection of assets
    rpc ListMetrics(inventory.AssetSelector) returns (monitoring.MetricsList){
        option (google.api.http) = {
            post: "/v1/inventory/{organization_id}/metrics/list"
            body: "*"
        };
    }
    // QueryMetrics retrieves the monitoring data of selected assets
    rpc QueryMetrics(monitoring.QueryMetricsRequest) returns (monitoring.QueryMetricsResult){
        option (google.api.http) = {
            post: "/v1/inventory/{assets.organization_id}/metrics/query"
            body: "*"
        };
    }
    // ConfigureMetrics sets metrics-specific configuration options for relevant
    // Edge Controllers
    rpc ConfigureMetrics(ConfigureMetricsRequest) returns (common.Success){
        option (google.api.http) = {
            post: "/v1/inventory/{organization_id}/metrics/configure"
            body: "*"
        };
    }
}

// User level related information.
service Users {
    rpc Add(AddUserRequest) returns (User){
        option (google.api.http) = {
            post: "/v1/users/{organization_id}/add"
            body: "*"
        };
    }
    // Info returns information about a given user.
    rpc Info(user.UserId) returns (User){
        option (google.api.http) = {
            get: "/v1/users/{organization_id}/{email}/info"
        };
    }
    // List returns the users inside an organization.
    rpc List(organization.OrganizationId) returns (UserList){
        option (google.api.http) = {
            get: "/v1/users/{organization_id}/list"
        };
    }
    // Delete removes a user from an organization.
    rpc Delete(user.UserId) returns (common.Success){
        option (google.api.http) = {
            post: "/v1/users/{organization_id}/delete"
            body: "*"
        };
    }

    // ChangePassword update an existing password.
    rpc ChangePassword (user_manager.ChangePasswordRequest) returns (common.Success) {
        option (google.api.http) = {
            post: "/v1/users/{organization_id}/change"
            body: "*"
        };
    }

    // Update the user information.
    rpc Update(user.UpdateUserRequest) returns (common.Success){
        option (google.api.http) = {
            post: "/v1/users/{organization_id}/update"
            body: "*"
        };
    }
}

// Roles
service Roles {
    // List the roles inside an organization.
    rpc List(organization.OrganizationId) returns (RoleList){
        option (google.api.http) = {
            get: "/v1/roles/{organization_id}/list"
        };
    }

    // ListInternal retrieves the list of internal roles inside an organization.
    rpc ListInternal(organization.OrganizationId) returns (RoleList){
        option (google.api.http) = {
            get: "/v1/roles/{organization_id}/internal/list"
        };
    }

    // AssignRole assigns a role to an existing user.
    rpc AssignRole(user_manager.AssignRoleRequest) returns (user_manager.User){
        option (google.api.http) = {
            post: "/v1/roles/{organization_id}/assign"
            body: "*"
        };
    }
}

service Applications {
    // AddAppDescriptor adds a new application descriptor to a given organization.
    rpc AddAppDescriptor(application.AddAppDescriptorRequest) returns (application.AppDescriptor){
        option (google.api.http) = {
            post: "/v1/apps/desc/{organization_id}/add"
            body: "*"
        };
    }
    // ListAppDescriptors retrieves a list of application descriptors.
    rpc ListAppDescriptors(organization.OrganizationId) returns (application.AppDescriptorList){
        option (google.api.http) = {
            get: "/v1/apps/desc/{organization_id}/list"
        };
    }
    // GetAppDescriptor retrieves a given application descriptor.
    rpc GetAppDescriptor(application.AppDescriptorId) returns (application.AppDescriptor) {
        option (google.api.http) = {
            get: "/v1/apps/desc/{organization_id}/{app_descriptor_id}/get"
        };
    }
    // UpdateAppDescriptor allows the user to update the information of a registered descriptor.
    rpc UpdateAppDescriptor(application.UpdateAppDescriptorRequest) returns (application.AppDescriptor){
        option (google.api.http) = {
            post: "/v1/apps/desc/{organization_id}/{app_descriptor_id}/update"
            body: "*"
        };
    }
    // DeleteAppDescriptor deletes a given application descriptor.
    rpc DeleteAppDescriptor(application.AppDescriptorId) returns (common.Success) {
        option (google.api.http) = {
            post: "/v1/apps/desc/{organization_id}/{app_descriptor_id}/delete"
            body: "*"
        };
    }

    // Deploy an application descriptor.
    rpc Deploy(application_manager.DeployRequest) returns (application_manager.DeploymentResponse){
        option (google.api.http) = {
            post: "/v1/apps/inst/{organization_id}/{app_descriptor_id}/deploy"
            body: "*"
        };
    }
    // Undeploy a running application instance.
    rpc Undeploy(application.AppInstanceId) returns (common.Success){
        option (google.api.http) = {
            post: "/v1/apps/inst/{organization_id}/{app_instance_id}/undeploy"
            body: "*"
        };
    }

    // ListAppInstances retrieves a list of application descriptors.
    rpc ListAppInstances(organization.OrganizationId) returns (AppInstanceList){
        option (google.api.http) = {
            get: "/v1/apps/inst/{organization_id}/list"
        };
    }

    // GetAppDescriptor retrieves a given application descriptor.
    rpc GetAppInstance(application.AppInstanceId) returns (AppInstance) {
        option (google.api.http) = {
            get: "/v1/apps/inst/{organization_id}/{app_instance_id}/get"
        };
    }

    // ListDescriptorAppParameters retrieves a list of parameters of an application
    rpc ListDescriptorAppParameters (application.AppDescriptorId) returns (AppParameterList) {
        option (google.api.http) = {
            get: "/v1/apps/desc/{organization_id}/{app_descriptor_id}/parameters"
        };
    }
    // ListInstanceParameters retrieves a list of parameters of an instance (deployment parameters)
    rpc ListInstanceParameters (application.AppInstanceId) returns (application.InstanceParameterList) {
        option (google.api.http) = {
            get: "/v1/apps/desc/{organization_id}/{app_instance_id}/parameters"
        };
    }

}

service UnifiedLogging{
    // Search for log entries matching a query.
    rpc Search(unified_logging.SearchRequest) returns(unified_logging.LogResponse) {
        option (google.api.http) = {
            post: "/v1/apps/inst/{organization_id}/{app_instance_id}/logs"
            body: "*"
        };
    }
}

// EdgeControllers related operations.
service EdgeControllers {
    // InstallAgent triggers the installation of an agent.
    rpc InstallAgent(inventory_manager.InstallAgentRequest) returns (ECOpResponse){
        option (google.api.http) = {
            post: "/v1/ec/{organization_id}/agent/install"
            body: "*"
        };
    }
    // CreateEICToken creates a new token for an EIC to join the platform.
    rpc CreateEICToken (organization.OrganizationId) returns (inventory_manager.EICJoinToken) {
        option (google.api.http) = {
            post: "/v1/ec/{organization_id}/token/create"
            body: "*"
        };
    }
    // UnlinkEIC operation to remove/uninstall an EIC.
    rpc UnlinkEIC (inventory_manager.UnlinkECRequest) returns (common.Success) {
        option (google.api.http) = {
            post: "/v1/ec/{organization_id}/unlink"
            body: "*"
        };
    }
    // UpdateGeolocation operation to update aen edge controller geolocation
    rpc UpdateGeolocation (inventory_manager.UpdateGeolocationRequest) returns (inventory.EdgeController) {
        option (google.api.http) = {
            post: "/v1/ec/{organization_id}/{edge_controller_id}/geolocation/update"
            body: "*"
        };
    }
}

// Agent related operations
service Agent {
    rpc CreateAgentJoinToken(inventory.EdgeControllerId) returns (inventory_manager.AgentJoinToken) {
        option (google.api.http) = {
            post: "/v1/agent/{organization_id}/{edge_controller_id}/token/create"
            body: "*"
        };
    }
    rpc ActivateMonitoring (AssetMonitoringRequest) returns (AgentOpResponse) {
        option (google.api.http) = {
           post: "/v1/agent/{organization_id}/{edge_controller_id}/{asset_id}/activate_monitoring"
           body: "*"
        };
    }
    // UninstallAgent operation to uninstall an agent
    rpc UninstallAgent (inventory_manager.UninstallAgentRequest) returns (ECOpResponse){
        option (google.api.http) = {
           post: "/v1/agent/{organization_id}/{asset_id}/uninstall"
           body: "*"
        };
    }
}

// Inventory
service Inventory {
    // ListMetrics returns available metrics for a certain selection of assets
    rpc List(organization.OrganizationId) returns (InventoryList){
        option (google.api.http) = {
            get: "/v1/inventory/{organization_id}/list"
        };
    }
    // GetControllerExtendedInfo returns the information of the edge controller with the information of its assets.
    rpc GetControllerExtendedInfo(inventory.EdgeControllerId) returns (EdgeControllerExtendedInfo){
        option (google.api.http) = {
            get: "/v1/inventory/{organization_id}/ec/{edge_controller_id}/extended"
        };
    }
    // GetAssetInfo returns the information of a given asset
    rpc GetAssetInfo(inventory.AssetId) returns (Asset){
        option (google.api.http) = {
            get: "/v1/inventory/asset/{organization_id}/{asset_id}/extended"
        };
    }
    // GetDeviceInfo returns the information of a given asset
    rpc GetDeviceInfo(inventory_manager.DeviceId) returns (Device){
        option (google.api.http) = {
            get: "/v1/inventory/device/{organization_id}/{asset_device_id}/extended"
        };
    }
    // UpdateAsset updates an asset from the inventory
    rpc UpdateAsset (inventory.UpdateAssetRequest) returns (inventory.Asset) {
        option (google.api.http) = {
            post: "/v1/inventory/{organization_id}/asset/{asset_id}/update"
            body: "*"
        };
    }
    // UpdateEdgeController updates an EC from the inventory
    rpc UpdateEdgeController (inventory.UpdateEdgeControllerRequest) returns (inventory.EdgeController) {
        option (google.api.http) = {
            post: "/v1/inventory/{organization_id}/ec/{edge_controller_id}/update"
            body: "*"
        };
    }
    // UpdateDeviceLocation updates the location of a device on the inventory view
    rpc UpdateDeviceLocation (inventory_manager.UpdateDeviceLocationRequest) returns (Device) {
        option (google.api.http) = {
            post: "/v1/inventory/{organization_id}/device/{asset_device_id}/update"
            body: "*"
        };
    }
    // Summary retrieves a summary of the assets in the inventory.
    rpc Summary(organization.OrganizationId) returns (inventory_manager.InventorySummary){
        option (google.api.http) = {
            get: "/v1/inventory/{organization_id}/summary"
        };
    }
}

// application network related operations
service Appnet {
    // ListAvailableInstanceInbounds retrieves a list of available inbounds of an organization
    rpc ListAvailableInstanceInbounds(organization.OrganizationId) returns (application_manager.AvailableInstanceInboundList) {
        option (google.api.http) = {
            get: "/v1/appnet/inbound/{organization_id}/available"
        };

    }
    // ListAvailableInstanceOutbounds retrieves a list of available outbounds of an organization
    rpc ListAvailableInstanceOutbounds(organization.OrganizationId) returns (application_manager.AvailableInstanceOutboundList){
        option (google.api.http) = {
            get: "/v1/appnet/outbound/{organization_id}/available"
        };

    }
    // AddConnection adds a new connection between one outbound and one inbound
    rpc AddConnection (appnet.AddConnectionRequest) returns (appnet.ConnectionInstance) {
        option (google.api.http) = {
            post: "/v1/appnet/connection/{organization_id}/add"
            body: "*"
        };
    }
    // RemoveConnection removes a connection
    rpc RemoveConnection (appnet.RemoveConnectionRequest) returns (common.Success) {
        option (google.api.http) = {
            post: "/v1/appnet/connection/{organization_id}/remove"
            body: "*"
        };
    }
    // ListConnections retrieves a list all the established connections of an organization
    rpc ListConnections(organization.OrganizationId) returns (appnet.ConnectionInstanceList) {
        option (google.api.http) = {
            get: "/v1/appnet/connection/{organization_id}/list"
        };
    }
}
