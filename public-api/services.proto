/*
 * Copyright (C) 2018 Nalej - All Rights Reserved
 */

syntax = "proto3";

package public_api;
option go_package = "github.com/nalej/grpc-public-api-go";

import "public-api/entities.proto";
import "organization/entities.proto";
import "user/entities.proto";
import "common/entities.proto";
import "infrastructure/entities.proto";
import "application/entities.proto";
import "application-manager/entities.proto";
import "infrastructure-manager/entities.proto";
import "conductor/entities.proto";
import "google/api/annotations.proto";

// Organization related information.
service Organizations {
    // Info returns the information about a given organization.
    rpc Info(organization.OrganizationId) returns(OrganizationInfo){
        option (google.api.http) = {
            get: "/v1/organization/{organization_id}"
        };
    }
}

// Cluster related information.
// TODO Migrate InstallResponse response to user friendly enums for the front.
service Clusters {
    // Install a new cluster adding it to the system.
    rpc Install(InstallRequest) returns (infrastructure_manager.InstallResponse){
        option (google.api.http) = {
            post: "/v1/clusters/{organization_id}/install"
            body: "*"
        };
    }

    // Info retrieves the cluster information.
    rpc Info(infrastructure.ClusterId) returns (Cluster) {
        option (google.api.http) = {
            get: "/v1/clusters/{organization_id}/{cluster_id}/info"
        };
    }

    // List all the clusters in an organization.
    rpc List(organization.OrganizationId) returns(ClusterList){
        option (google.api.http) = {
            get: "/v1/clusters/{organization_id}/list"
        };
    }
    // Update the cluster information.
    rpc Update(UpdateClusterRequest) returns (common.Success){
        option (google.api.http) = {
            post: "/v1/clusters/{organization_id}/{cluster_id}/update"
            body: "*"
        };
    }
}

// Node related information.
service Nodes {
    // List retrieves information about the nodes of a cluster.
    rpc List(infrastructure.ClusterId) returns(NodeList){
        option (google.api.http) = {
            get: "/v1/nodes/{organization_id}/{cluster_id}/list"
        };
    }
}

// Resource level related information.
service Resources {
    // Summary provides an overview of the resources inside an organization.
    rpc Summary(organization.OrganizationId) returns(ResourceSummary){
        option (google.api.http) = {
            get: "/v1/resources/{organization_id}/summary"
        };
    }
}

// User level related information.
service Users {
    rpc Add(AddUserRequest) returns (User){
        option (google.api.http) = {
            post: "/v1/users/{organization_id}/add"
            body: "*"
        };
    }
    // Info returns information about a given user.
    rpc Info(user.UserId) returns (User){
        option (google.api.http) = {
            get: "/v1/users/{organization_id}/{email}/info"
        };
    }
    // List returns the users inside an organization.
    rpc List(organization.OrganizationId) returns (UserList){
        option (google.api.http) = {
            get: "/v1/users/{organization_id}/list"
        };
    }
    // Delete removes a user from an organization.
    rpc Delete(user.UserId) returns (common.Success){
        option (google.api.http) = {
            post: "/v1/users/{organization_id}/delete"
            body: "*"
        };
    }
    // ResetPassoword resets a user password.
    rpc ResetPassword(user.UserId) returns (PasswordResetResponse){
        option (google.api.http) = {
            post: "/v1/users/{organization_id}/reset"
            body: "*"
        };
    }
    // Update the user information.
    rpc Update(user.UpdateUserRequest) returns (common.Success){
        option (google.api.http) = {
            post: "/v1/users/{organization_id}/update"
            body: "*"
        };
    }
}

// Roles
service Roles {
    // List the roles inside an organization.
    rpc List(organization.OrganizationId) returns (RoleList){
        option (google.api.http) = {
            get: "/v1/roles/{organization_id}/list"
        };
    }

    // ListInternal retrieves the list of internal roles inside an organization.
    rpc ListInternal(organization.OrganizationId) returns (RoleList){
        option (google.api.http) = {
            get: "/v1/roles/{organization_id}/internal/list"
        };
    }
}

service Applications {
    // AddAppDescriptor adds a new application descriptor to a given organization.
    rpc AddAppDescriptor(application.AddAppDescriptorRequest) returns (application.AppDescriptor){
        option (google.api.http) = {
            post: "/v1/apps/desc/{organization_id}/add"
            body: "*"
        };
    }
    // ListAppDescriptors retrieves a list of application descriptors.
    rpc ListAppDescriptors(organization.OrganizationId) returns (application.AppDescriptorList){
        option (google.api.http) = {
            get: "/v1/apps/desc/{organization_id}/list"
        };
    }
    // GetAppDescriptor retrieves a given application descriptor.
    rpc GetAppDescriptor(application.AppDescriptorId) returns (application.AppDescriptor) {
        option (google.api.http) = {
            get: "/v1/apps/desc/{organization_id}/{app_descriptor_id}/get"
        };
    }
    // DeleteAppDescriptor deletes a given application descriptor.
    rpc DeleteAppDescriptor(application.AppDescriptorId) returns (common.Success) {
        option (google.api.http) = {
            post: "/v1/apps/desc/{organization_id}/{app_descriptor_id}/delete"
            body: "*"
        };
    }

    // Deploy an application descriptor.
    rpc Deploy(application_manager.DeployRequest) returns (conductor.DeploymentResponse){
        option (google.api.http) = {
            post: "/v1/apps/inst/{organization_id}/{app_descriptor_id}/deploy"
            body: "*"
        };
    }
    // Undeploy a running application instance.
    rpc Undeploy(application.AppInstanceId) returns (common.Success){
        option (google.api.http) = {
            post: "/v1/apps/inst/{organization_id}/{app_instance_id}/undeploy"
            body: "*"
        };
    }

    // ListAppInstances retrieves a list of application descriptors.
    rpc ListAppInstances(organization.OrganizationId) returns (AppInstanceList){
        option (google.api.http) = {
            get: "/v1/apps/inst/{organization_id}/list"
        };
    }

    // GetAppDescriptor retrieves a given application descriptor.
    rpc GetAppInstance(application.AppInstanceId) returns (AppInstance) {
        option (google.api.http) = {
            get: "/v1/apps/inst/{organization_id}/{app_instance_id}/get"
        };
    }
}