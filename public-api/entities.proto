/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package public_api;
option go_package = "github.com/nalej/grpc-public-api-go";

import "infrastructure/entities.proto";
import "application/entities.proto";
import "application-network/entities.proto";
import "installer/entities.proto";
import "inventory-manager/entities.proto";
import "inventory/entities.proto";
import "connectivity-manager/entities.proto";
import "common/entities.proto";
import "unified-logging/entities.proto";


// --------------------------------
// Organization related entities.
// --------------------------------

// OrganizationInfo contains public organization information.
message OrganizationInfo {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // Name of the organization as set by the user during install.
    string name = 2;
}

// --------------------------------
// Clusters
// --------------------------------

// Cluster entity contains all information related to an application cluster in the system.
message Cluster {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // ClusterId with the cluster identifier.
    string cluster_id = 2;
    // Name of the cluster.
    string name = 3;
    // ClusterTypeName contains the name of the type of cluster.
    string cluster_type_name = 4;
    // MultitenantSupport contains the type of support definition.
    string multitenant_support = 5;
    // StatusName with the name of the status of the cluster based on monitoring information.
    string status_name = 6;
    // Status with the status of the cluster based on cluster alive signals sent between connectivity manager and checker
    connectivity_manager.ClusterStatus status = 7;
    // Labels for the cluster.
    map<string, string> labels = 8;
    // TotalNodes contains the total number of nodes in the cluster.
    int64 total_nodes = 9;
    // RunningNodes contains the number of nodes in the system that are currently working.
    int64 running_nodes = 10;
    // LastAliveTimestamp contains the last alive message received
    int64 last_alive_timestamp = 11;
    // State of the cluster with respect to provisioning and installation.
    infrastructure.ClusterState state = 13;
    // StateName contains the name of the cluster state.
    string state_name = 14;
}

// ClusterList with a list of clusters.
message ClusterList {
    // Clusters contains the list of clusters.
    repeated Cluster clusters = 1;
}

// UpdateClusterRequest message with the elements of a cluster that can be modified through public api.
message UpdateClusterRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // ClusterId with the cluster identifier.
    string cluster_id = 2;
    // UpdateName flag to determine if the name needs to be changed.
    bool update_name = 3;
    // Name of the cluster.
    string name = 4;
    // Add Label flag to indicate that the set of labels need to be added.
    bool add_labels = 5;
    // Remove label flag to indicate that the set of labels need to be removed.
    bool remove_labels = 6;
    // Labels for the cluster.
    map<string, string> labels = 7;
}

// Type of platform targetting this install request
enum Platform {
    // Minikube for local deployments
    MINIKUBE = 0;
    // Azure for cloud-based deployments
    AZURE = 1;
}

// InstallRequest message used to specify the cluster to be installed.
message InstallRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // ClusterId with the cluster identifier.
    string cluster_id = 2;
    // Type of cluster.
    infrastructure.ClusterType cluster_type = 3;
    // InstallBaseSystem flag to indicate that the base system must be installed on the nodes.
    bool install_base_system = 4;
    // KubeConfigRaw contains the required data to connect to a Kubernetes cluster in case it is already installed.
    string kube_config_raw = 5;
    // Hostname of the cluster master. This value is used to connect to the app cluster ingress.
    string hostname = 6;
    // Username to connect to the remote machines when the base system needs to be installed.
    string username = 7;
    // PrivateKey contains the SSH private key required when the base system needs to be installed.
    string private_key = 8;
    // Nodes contains the list of IP addresses to be installed.
    repeated string nodes = 9;
    // Use Kube DNS configuration
    bool use_kube_dns = 10;
    // Use CoreDNS configuration
    bool use_core_dns = 11;
    // Target platform
    Platform target_platform = 12;
    // Static IP addresses
    installer.StaticIPAddresses static_ip_addresses = 13;
}

// --------------------------------
// Nodes
// --------------------------------

// Node entity representing a single node of the architecture that executes application instances.
message Node {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // ClusterId with the associated cluster identifier the node is assigned to.
    string cluster_id = 2;
    // Id with the node identifier.
    string node_id = 3;
    // Ip with the node IP.
    string ip = 4;
    // Labels for the node.
    map<string, string> labels = 5;
    // StatusName of the node based on monitoring information.
    string status_name = 6;
    // StateName of assignation of the node.
    string state_name = 7;
}

message NodeList {
    repeated Node nodes = 1;
}

message UpdateNodeRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // NodeId with the node identifier.
    string node_id = 2;
    // Add Label flag to indicate that the set of labels need to be added.
    bool add_labels = 3;
    // Remove label flag to indicate that the set of labels need to be removed.
    bool remove_labels = 4;
    // Labels for the cluster.
    map<string, string> labels = 5;
}

// --------------------------------
// Resources
// --------------------------------

message ResourceSummary {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    int64 total_clusters = 2;
    int64 total_nodes = 3;
}

message ConfigureMetricsRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // EdgeControllerId indicates the Edge Controller for this configuration
    // request. Empty means all Edge Controllers.
    string edge_controller_id = 2;
    // MetricConfig contains the metrics configuration options
    inventory_manager.MetricsConfiguration metrics_config = 3;
}

// --------------------------------
// Users
// --------------------------------

// AddUserRequest message with the information required to add a user to the platform.
message AddUserRequest {
    string organization_id = 1;
    string email = 2;
    string password = 3;
    string name = 4;
    string role_name = 5;
}

// User model the information available regarding a User of an organization
message User {
    string organization_id = 1;
    string email = 2;
    string name = 3;
    string role_name = 4;
}

message UserList {
    repeated User users = 1;
}

// PasswordResetResponse contains an automatically generated password set for the user.
// In future versions, the password reset will be sent as a link in an email for the user to reset
// the password.
message PasswordResetResponse {
    string organization_id = 1;
    string email = 2;
    string new_password = 3;
}

// --------------------------------
// Roles
// --------------------------------

// Role defines a role for users of an organization with the associated capabilities
message Role {
    string organization_id = 1;
    string role_id = 2;
    string name = 3;
    repeated string primitives = 4;
}

message RoleList {
    repeated Role roles = 1;
}

// --------------------------------
// Applications
// --------------------------------

message Endpoint {
    string type_name = 1;
    string path = 2;
}

message Port {
    string name = 1;
    int32 internal_port = 2;
    int32 exposed_port = 3;
    repeated Endpoint endpoints = 4;
}

// Storage restrictions
message Storage {
    int64 size = 1;
    string mount_path = 2;
    string type_name = 3;
}

message ServiceInstance {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 3;
    // ServiceGroupId with the group identifier.
    string service_group_id = 4;
    // ServiceGroupInstanceId with the service group instance identifier.
    string service_group_instance_id = 5;
    // ServiceId with the service identifier.
    string service_id = 6;
    // Unique identifier for this instance
    string service_instance_id = 7;
    // Name of the service.
    string name = 8;
    // ServiceType represents the underlying technology of the service to be launched.
    string type_name = 9;
    // Image contains the URL/name of the image to be executed.
    string image = 10;
    // ImageCredentials with the data required to access the repository the image is available at.
    application.ImageCredentials credentials = 11;
    // DeploySpecs with the resource specs required by the service.
    application.DeploySpecs specs = 12;
    // Storage restrictions
    repeated Storage storage = 13;
    // ExposedPorts contains the list of ports exposed by the current service.
    repeated Port exposed_ports = 14;
    // EnvironmentVariables defines a key-value map of environment variables and values that will be passed to all
    // running services.
    map<string, string> environment_variables = 15;
    // Configs contains the configuration files required by the service.
    repeated application.ConfigFile configs = 16;
    // Labels with the user defined labels.
    map<string, string> labels = 17;
    // DeployAfter contains the list of services that must be running before launching a service.
    repeated string deploy_after = 18;
    // Status of the deployed service
    string status_name = 19;
    // Endpoints exposed to the users by the service.
    repeated string endpoints = 20;
    // DeployedOnClusterId specifies which is the cluster where the service is running.
    string deployed_on_cluster_id = 21;
    // Run arguments
    repeated string run_arguments = 22;
    // Relevant information about this instance
    string info = 23;
}

// SecurityRule structure defining which element can access a given application service.
message SecurityRule {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // RuleId with the security rule identifier.
    string rule_id = 3;
    // Name of the security rule.
    string name = 4;
    // TargetServiceGroupName defining the name of the service to be accessed.
    string target_service_group_name = 5;
    // TargetServiceName name of the service belonging to be source group mentioned above to be accessed.
    string target_service_name = 6;
    // TargetPort defining the port that is affected by the current rule.
    int32 target_port = 7;
    // Access level to that port defining who can access the port.
    string access_name = 8;
    // Name of the service group
    string auth_service_group_name = 9;
    // AuthServices defining a list of services that can access the port.
    repeated string auth_services = 10;
    // DeviceGroups defining a list of device groups that can access the port. This field cannot be set by the user when uploading the descriptor.
    repeated string device_group_ids = 11;
    // DeviceGroupNames defining a list of device groups names that can access the port.
    repeated string device_group_names = 12;
    // inbound_net_interface_name The name of the inbound net interface linked to the security rule
    string inbound_net_interface_name = 13;
    // outbound_net_interface_name The name of the outbound net interface linked to the security rule
    string outbound_net_interface_name = 14;
}

// This is a common metadata entity that collects information for a deployed instance. This instance can be a
// service instance or a service group instance.
message InstanceMetadata {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 3;
    // Identifier of the monitored entity. This generic id can be used to monitor different kinds of objects.
    string monitored_instance_id = 4;
    // Type of instance this metadata refers to
    string type_name = 5;
    // List of instances supervised by this metadata structure
    repeated string instances_id = 6;
    // Number of desired replicas specified in the descriptor
    int32 desired_replicas = 7;
    // Number of available replicas for this instance
    int32 available_replicas = 8;
    // Number of unavailable replicas for this descriptor
    int32 unavailable_replicas = 9;
    // Status of every item monitored by this metadata entry
    map<string, string> status_name = 10;
    // Relevant information for every monitored instance
    map<string, string> info = 11;
}

// It specifies how to proceed deploying a service group. Some specs here may invalidate specific service deployment
// specs.
message ServiceGroupDeploymentSpecs {
    // How many times this service group must be replicated
    int32 replicas = 1;
    // Indicate if this service group must be replicated in every cluster
    bool multi_cluster_replica = 2;
    // DeploymentSelectors defines a key-value map of deployment selectors
    map<string, string> deployment_selectors = 3;
}

// ServiceGroupInstance structure to represent a collection of services that must be deployed following a given collocation
// policy.
message ServiceGroupInstance {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 3;
    // ServiceGroupId with the group identifier.
    string service_group_id = 4;
    // Unique identifier for this instance
    string service_group_instance_id = 5;
    // Name of the service group.
    string name = 6;
    // ServicesInstances with the list of instance objects for this group
    repeated ServiceInstance service_instances = 7;
    // Policy indicating the deployment collocation policy.
    string policy_name = 8;
    // The status for this service group instance will be the worst status of its services
    string status_name = 9;
    // Metadata for this service group
    InstanceMetadata metadata = 10;
    // Particular deployment specs for this service
    ServiceGroupDeploymentSpecs specs = 11;
    // Labels defined by the user.
    map<string, string> labels = 12;
    //all the global fqdn of the instances of the group
    repeated string global_fqdn = 13;
}

// AppInstance represents an instance of the application in the system.
message AppInstance {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 3;
    // Name of the application.
    string name = 4;
    // ConfigurationOptions defines a key-value map of configuration options.
    map<string, string> configuration_options = 5;
    // EnvironmentVariables defines a key-value map of environment variables and values that will be passed to all
    // running services.
    map<string, string> environment_variables = 6;
    // Labels defined by the user.
    map<string, string> labels = 7;
    // Rules that define the connectivity between the elements of an application.
    repeated SecurityRule rules = 8;
    // Groups with the Service collocation strategies.
    repeated ServiceGroupInstance groups = 9;
    // Status of the deployed instance.
    string status_name = 10;
    // Metadata descriptor for the instances triggered by this app
    repeated InstanceMetadata metadata = 11;
    // Textual information about this particular application instance
    string info = 12;
    // InboundNetInterfaces with a list of inbounds
    repeated application.InboundNetworkInterface inbound_net_interfaces = 13;
    // OutboundNetInterfaces with a list of outbounds
    repeated application.OutboundNetworkInterface outbound_net_interfaces = 14;
    // InboundConnections with a list of connections where the instance is the target
    repeated ConnectionInstance inbound_connections = 15;
    // OutboundConnections with a list of connections where the instance is the source
    repeated ConnectionInstance outbound_connections = 16;
}

message AppInstanceList {
    repeated AppInstance instances = 1;
}

// AppParameter represents the definition of an application parameter
message AppParameter {
    // Name with the name of the parameter. It can not start with 'NALEJ'
    // It will be used to substitute it through the descriptor when application is deployed.
    string name = 1;
    // Description with the description of the parameter.
    string description = 2;
    //XPATH to access the parameter
    string path = 3;
    // DataType with the value type (bool, integer, float, enum, string, password)
    string type = 4;
    // DefaultValue with the value by default of the field
    string default_value = 5;
    // Category indicates if the parameter is basic or advanced
    string category = 6;
    // enumValues indicates, in case of an enum type parameter, the values allowed
    repeated string enum_values = 7;
}

message AppParameterList {
    repeated AppParameter parameters = 1;
}

// --------------------------------
// Applications - Application-network
// --------------------------------

message ConnectionInstance{
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // ConnectionId with the connection identifier
    string connection_id = 2;
    // SourceInstanceId with the identifier of the outbound instance
    string source_instance_id = 3;
    // SourceInstanceId with the name of the outbound instance
    string source_instance_name = 4;
    // TargetInstanceId with the identifier of the inbound instance
    string target_instance_id = 5;
    // TargetInstanceId with the identifier of the inbound instance
    string target_instance_name = 6;
    // InboundName with the name of the inbound identifier
    string inbound_name = 7;
    // OutboundName with the name of the outbound identifier
    string outbound_name = 8;
    // OutboundRequired is a flag that indicates if the outbound connection should be informed when deploying an instance
    bool outbound_required = 9;
    // Status Status of the connection
    string status_name = 10;
    // IpRange The range of IPs associated to the network where the peers are connected
    string ip_range = 11;
    // ZtNetworkId A link to the zt network created for the connection
    string zt_network_id = 12;
}

message ConnectionInstanceList{
    repeated ConnectionInstance list = 1;
}

// --------------------------------
// Devices
// --------------------------------

// AssetInfo defines the information related to Hw, Storage and OS
message AssetInfo {
    // OS contains Operating System information.
    OperatingSystemInfo os = 1;
    // Hardware information.
    inventory.HardwareInfo hardware = 2;
    // Storage information.
    repeated inventory.StorageHardwareInfo storage = 3;
}
message Device {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // DeviceId with the device identifier.
    string device_id = 3;
    // AssetDeviceId is the composite of DeviceID and DeviceGroupId
    string asset_device_id = 4;
    // RegisterSince is the timestamp when the device joined the group.
    int64 register_since = 5;
    // Labels defined by the user.
    map<string, string> labels = 6;
    // Enabled determines if the device can interact with the running applications.
    bool enabled = 7;
    // DeviceStatus contains the status of the device (ONLINE/OFFLINE)
    string device_status_name = 8;
    // location with the device location
    inventory.InventoryLocation location = 9;
    // AssetInfo with the information related to Hw, Storage and OS
    AssetInfo asset_info = 10;
}

message DeviceList {
    repeated Device devices = 1;
}

// --------------------------------
// Controllers
// --------------------------------

// ECOpSummary contains the result of an edge controller operation
message ECOpSummary {
    // OperationId with the operation identifier.
    string operation_id = 1;
    // Timestamp of the response.
    int64 timestamp = 2;
    // Status indicates if the operation was successful
    inventory.OpStatus status = 3;
    // OpStatusName with the status of the last operation.
    string op_status_name = 4;
    // Info with additional information for an operation.
    string info = 5;
}

// EdgeController entity.
message EdgeController {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // EdgeControllerId with the EIC identifier.
    string edge_controller_id = 2;
    // Show flag to determine if this asset should be shown on the UI. This flag is internally used
    // for the async uninstall/removal of the asset.
    bool show = 3;
    // Created time
    int64 created = 4;
    // Name of the EIC.
    string name = 5;
    // Labels defined by the user.
    map<string, string> labels = 6;
    // LastAliveTimestamp contains the last alive message received
    int64 last_alive_timestamp = 7;
    // Status for the UI.
    inventory_manager.ConnectedStatus status = 8;
    // StatusName with the status of the asset.
    string status_name = 9;
    // location with the EC location
    inventory.InventoryLocation location = 10;
    // ECOpSummary contains the result of the last operation for this edge controller
    ECOpSummary last_op_result = 11;
    // AssetInfo with the information related to Hw, Storage and OS
    AssetInfo asset_info = 12;
}

message ECOpResponse {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // EdgeControllerId with the EIC identifier that facilitated the operation.
    string edge_controller_id = 2;
    // OperationId with the operation identifier.
    string operation_id = 3;
    // Timestamp of the response.
    int64 timestamp = 4;
    // Status indicates if the operation was successful
    string status = 5;
    // Info with additional information for an operation.
    string info = 6;
}

// --------------------------------
// Assets
// --------------------------------

// OperatingSystemInfo contains information about the operating system of an asset. Notice that no
// enums have been used for either the name or the version as to no constraint the elements of the
// inventory even if we do not have an agent running supporting those.
message OperatingSystemInfo {
    // Name of the operating system. Expecting full name.
    string name = 1;
    // Version installed.
    string version = 2;
    // Class of the operating system - determines the binary format together with architecture
    inventory.OperatingSystemClass class = 3;
    // ClassName with the string representation of the name.
    string class_name = 4;
    // Architecture of the OS.
    string architecture = 5;
}

// AgentOpSummary contains the result of an asset operation
// this is a provisional result!
message AgentOpSummary {
    // OperationId with the operation identifier.
    string operation_id = 1;
    // Timestamp of the response.
    int64 timestamp = 2;
    // Status indicates if the operation was successful
    inventory.OpStatus status = 3;
    // OpStatusName with the status of the last operation.
    string op_status_name = 4;
    // Info with additional information for an operation.
    string info = 5;
}

// Asset represents an element in the network from which we register some type of information. Example of
// assets could be workstations, nodes in a cluster, or other type of hardware.
message Asset {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // EdgeControllerId with the EIC identifier.
    string edge_controller_id = 2;
    // AssetId with the asset identifier.
    string asset_id = 3;
    // AgentId with the agent identifier that is monitoring this asset if any.
    string agent_id = 4;
    // Show flag to determine if this asset should be shown on the UI. This flag is internally used
    // for the async uninstall/removal of the asset.
    bool show = 5;
    // Created time
    int64 created = 6;
    // Labels defined by the user.
    map<string, string> labels = 7;
    // OS contains Operating System information.
    OperatingSystemInfo os = 8;
    // Hardware information.
    inventory.HardwareInfo hardware = 9;
    // Storage information.
    repeated inventory.StorageHardwareInfo storage = 10;
    // EicNetIp contains the current IP address that connects the asset to the EIC.
    string eic_net_ip = 11;
    // LastOpSummary contains the result of the last operation fr this asset
    AgentOpSummary last_op_summary = 12;
    // LastAliveTimestamp contains the last alive message received
    int64 last_alive_timestamp = 13;
    // Status of the agent.
    inventory_manager.ConnectedStatus status = 14;
    // StatusName with the status of the asset.
    string status_name = 15;
    // location with the asset location
    inventory.InventoryLocation location = 16;
}

message AssetMonitoringRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // EdgeControllerId with the EIC identifier.
    string edge_controller_id = 2;
    // AssetId with the asset identifier.
    string asset_id = 3;
    // Activate with a flag to indicate if the monitoring is going to activate or deactivate
    bool activate = 4;
}

message AgentOpResponse {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // EdgeControllerId with the EIC identifier that facilitated the operation.
    string edge_controller_id = 2;
    // AssetId with the asset identifier.
    string asset_id = 3;
    // OperationId with the operation identifier.
    string operation_id = 4;
    // Timestamp of the response.
    int64 timestamp = 5;
    // Status indicates if the operation was successful
    string status = 6;
    // Info with additional information for an operation.
    string info = 7;
}

// --------------------------------
// Inventory
// --------------------------------

// InventoryList message with a collection of all elements in the inventory
message InventoryList {
    // Devices
    repeated Device devices = 1;
    // Assets
    repeated Asset assets = 2;
    // Controllers
    repeated EdgeController controllers = 3;
}

// EdgeControllerExtendedInfo with the information of the controller and the associated assets.
message EdgeControllerExtendedInfo {
    // Controller information
    EdgeController controller = 1;
    // ManagedAssets with the assets managed by the controller
    repeated Asset managed_assets = 2;
}

message OpResponse {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // RequestId with the request identifier.
    string request_id = 3;
    // Timestamp of the response.
    int64 timestamp = 4;
    // Status indicates if the operation was successful
    common.OpStatus status = 5;
    // StatusName name that indicates if the operation was successful
    string status_name = 6;
    // Info with additional information for an operation.
    string info = 7;
}

// -------------------
// Unified-logging
// -------------------

// Order is used to define the ordering of search results
enum Order {
    // Ascending order
    ASC = 0;
    // Descending order
    DESC = 1;
}

// OrderOptions is used to indicate by which field it is going to be ordered and if the order is asc or des
message OrderOptions {
    string field = 1;
    Order order = 2;
}

// SearchRequest message with the query to be resolved.
message SearchRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the descriptor identifier
    string app_descriptor_id = 2;
    // AppInstanceId with the identifier of the target application instance.
    string app_instance_id = 3;
    // ServiceGroupId with the service group identifier we asked for
    string service_group_id = 4;
    // ServiceGroupInstanceId with the target group instance. If not set, the response will contain all groups in
    // the application instance.
    string service_group_instance_id = 5;
    // ServiceId with the service identifier we asked for
    string service_id = 6;
    // ServiceInstanceId with the service instance identifier we asked for
    string service_instance_id = 7;
    // MsgQueryFilter contains a text query on the log entry.
    string msg_query_filter = 8;
    // From specifies the minimal timestamp of the expected entries.
    int64 from = 9;
    // To specifies the maximum timestamp of the expected entries.
    int64 to = 10;
    // Order specifies the sort order of the entries (on timestamp)
    OrderOptions order = 11;
}

message LogResponse {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // From with the minimal timestamp of the returned results.
    int64 from = 2;
    // To with the maximum timestamp of the returned results.
    int64 to = 3;
    // Entries with the captured log entries.
    repeated LogEntryResponse entries = 4;
}

message LogEntryResponse {
    // AppDescriptorId with the descriptor identifier
    string app_descriptor_id = 1;
    // AppDescriptorName with the descriptor name
    string app_descriptor_name = 2;
    // AppInstanceId with the identifier of the target application instance.
    string app_instance_id = 3;
    // AppInstanceName wit the name of the instance
    string app_instance_name = 4;
    // ServiceGroupId with the service group identifier
    string service_group_id = 5;
    // ServiceGroupInstanceId with the target group instance. If not set, the response will contain all groups in
    // the application instance.
    string service_group_instance_id = 6;
    // ServiceGroupName withe the name of the service group
    string service_group_name = 7;
    // ServiceId with the service identifier
    string service_id = 8;
    // ServiceInstanceId with the service instance identifier
    string service_instance_id = 9;
    // ServiceName with the name of the service
    string service_name = 10;
    // Timestamp
    int64 timestamp = 11;
    // Msg contains the log entry.
    string msg = 12;
    // IsDead means that the service is not longer deployed
    bool is_dead =13;
}