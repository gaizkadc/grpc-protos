/*
 * Copyright (C) 2018 Nalej - All Rights Reserved
 */

syntax = "proto3";

package public_api;
option go_package = "github.com/nalej/grpc-public-api-go";

import "infrastructure/entities.proto";
import "application/entities.proto";
import "installer/entities.proto";

// --------------------------------
// Organization related entities.
// --------------------------------

// OrganizationInfo contains public organization information.
message OrganizationInfo {
    string organization_id = 1;
    string name = 2;
}

// --------------------------------
// Clusters
// --------------------------------

message Cluster {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // ClusterId with the cluster identifier.
    string cluster_id = 2;
    // Name of the cluster.
    string name = 3;
    // Description of the cluster.
    string description = 4;
    // ClusterTypeName contains the name of the type of cluster.
    string cluster_type_name = 5;
    // MultitenantSupport contains the type of support definition.
    string multitenant_support = 6;
    // StatusName with the name if the status of the cluster based on monitoring information.
    string status_name = 7;
    // Labels for the cluster.
    map <string, string> labels = 8;
    // TotalNodes contains the total number of nodes in the cluster.
    int64 total_nodes = 9;
    // RunningNodes contains the number of nodes in the system that are currently working.
    int64 running_nodes = 10;
}

message ClusterList {
    repeated Cluster clusters = 1;
}

message UpdateClusterRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // ClusterId with the cluster identifier.
    string cluster_id = 2;
    // Name of the cluster.
    string name = 3;
    // Description of the cluster.
    string description = 4;
    // Labels for the cluster.
    map <string, string> labels = 5;
}

// Type of platform targetting this install request
enum Platform {
    // Minikube for local deployments
    MINIKUBE = 0;
    // Azure for cloud-based deployments
    AZURE = 1;
}

// InstallRequest message used to specify the cluster to be installed.
message InstallRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // ClusterId with the cluster identifier.
    string cluster_id = 2;
    // Type of cluster.
    infrastructure.ClusterType cluster_type = 3;
    // InstallBaseSystem flag to indicate that the base system must be installed on the nodes.
    bool install_base_system = 4;
    // KubeConfigRaw contains the required data to connect to a Kubernetes cluster in case it is already installed.
    string kube_config_raw = 5;
    // Hostname of the cluster master. This value is used to connect to the app cluster ingress.
    string hostname = 6;
    // Username to connect to the remote machines when the base system needs to be installed.
    string username = 7;
    // PrivateKey contains the SSH private key required when the base system needs to be installed.
    string private_key = 8;
    // Nodes contains the list of IP addresses to be installed.
    repeated string nodes = 9;
    // Use Kube DNS configuration
    bool use_kube_dns = 10;
    // Use CoreDNS configuration
    bool use_core_dns = 11;
    // Target platform
    Platform target_platform = 12;
    // Static IP addresses
    installer.StaticIPAddresses static_ip_addresses = 13; 
}

// --------------------------------
// Nodes
// --------------------------------

// Node entity representing a single node of the architecture that executes application instances.
message Node {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // ClusterId with the associated cluster identifier the node is assigned to.
    string cluster_id = 2;
    // Id with the node identifier.
    string node_id = 3;
    // Ip with the node IP.
    string ip = 4;
    // Labels for the node.
    map<string, string> labels = 5;
    // StatusName of the node based on monitoring information.
    string status_name = 6;
    // StateName of assignation of the node.
    string state_name = 7;
}

message NodeList {
    repeated Node nodes = 1;
}


// --------------------------------
// Resources
// --------------------------------

message ResourceSummary {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    int64 total_clusters = 2;
    int64 total_nodes = 3;
}

// --------------------------------
// Users
// --------------------------------

// AddUserRequest message with the information required to add a user to the platform.
message AddUserRequest {
    string organization_id = 1;
    string email = 2;
    string password = 3;
    string name = 4;
    string role_name = 5;
}

// User model the information available regarding a User of an organization
message User {
    string organization_id = 1;
    string email = 2;
    string name = 3;
    string role_name = 4;
}

message UserList {
    repeated User users = 1;
}

// PasswordResetResponse contains an automatically generated password set for the user.
// In future versions, the password reset will be sent as a link in an email for the user to reset
// the password.
message PasswordResetResponse {
    string organization_id = 1;
    string email = 2;
    string new_password = 3;
}

// --------------------------------
// Roles
// --------------------------------

// Role defines a role for users of an organization with the associated capabilities
message Role {
    string organization_id = 1;
    string role_id = 2;
    string name = 3;
    repeated string primitives = 4;
}

message RoleList {
    repeated Role roles = 1;
}

// --------------------------------
// Applications
// --------------------------------

message Endpoint {
    string type_name = 1;
    string path = 2;
}

message Port {
    string name = 1;
    int32 internal_port = 2;
    int32 exposed_port = 3;
    repeated Endpoint endpoints = 4;
}

message Storage {
    int64 size = 1;
    string mount_path = 2;
    string type_name = 3;
}

message ServiceInstance {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 3;
    // ServiceId with the service identifier.
    string service_id = 4;
    // Name of the service.
    string name = 5;
    // Description of the service.
    string description = 6;
    // ServiceType represents the underlying technology of the service to be launched.
    string type_name = 7;
    // Image contains the URL/name of the image to be executed.
    string image = 8;
    // ImageCredentials with the data required to access the repository the image is available at.
    application.ImageCredentials credentials = 9;
    // DeploySpecs with the resource specs required by the service.
    application.DeploySpecs specs = 10;
    // Storage restrictions
    repeated Storage storage = 11;
    // ExposedPorts contains the list of ports exposed by the current service.
    repeated Port exposed_ports = 12;
    // EnvironmentVariables defines a key-value map of environment variables and values that will be passed to all
    // running services.
    map<string, string> environment_variables = 13;
    // Configs contains the configuration files required by the service.
    repeated application.ConfigFile configs = 14;
    // Labels with the user defined labels.
    map<string, string> labels = 15;
    // DeployAfter contains the list of services that must be running before launching a service.
    repeated string deploy_after = 16;
    // Status of the deployed service
    string status_name = 17;
    // Endpoints exposed to the users by the service.
    repeated string endpoints = 18;
    // DeployedOnClusterId specifies which is the cluster where the service is running.
    string deployed_on_cluster_id = 19;
    // Run arguments
    repeated string run_arguments = 20;
}

// SecurityRule structure defining which element can access a given application service.
message SecurityRule {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // RuleId with the security rule identifier.
    string rule_id = 3;
    // Name of the security rule.
    string name = 4;
    // SourceServiceId defining the service onto which the security rule is defined.
    string source_service_id = 5;
    // SourcePort defining the port that is affected by the current rule.
    int32 source_port = 6;
    // Access level to that port defining who can access the port.
    string access_name = 7;
    // AuthServices defining a list of services that can access the port.
    repeated string auth_services = 8;
    // DeviceGroups defining a list of device groups that can access the port.
    repeated string device_groups = 9;
}

// ServiceGroupInstance structure to represent a collection of services that must be deployed following a given collocation
// policy.
message ServiceGroupInstance {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 3;
    // ServiceGroupId with the group identifier.
    string service_group_id = 4;
    // Name of the service group.
    string name = 5;
    // Description of the service group.
    string description = 6;
    // ServicesInstances defining a list of service identifiers that belong to the group.
    repeated string service_instances = 7;
    // Policy indicating the deployment collocation policy.
    string policy_name = 8;
}

// AppInstance represents an instance of the application in the system.
message AppInstance {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 3;
    // Name of the application.
    string name = 4;
    // Description of the application.
    string description = 5;
    // ConfigurationOptions defines a key-value map of configuration options.
    map<string, string> configuration_options = 6;
    // EnvironmentVariables defines a key-value map of environment variables and values that will be passed to all
    // running services.
    map<string, string> environment_variables = 7;
    // Labels defined by the user.
    map<string, string> labels = 8;
    // Rules that define the connectivity between the elements of an application.
    repeated SecurityRule rules = 9;
    // Groups with the Service collocation strategies.
    repeated ServiceGroupInstance groups = 10;
    // Services of the applicaiton.
    repeated ServiceInstance services = 11;
    // Status of the deployed instance.
    string status_name = 12;
}

message AppInstanceList {
    repeated AppInstance instances = 1;
}

