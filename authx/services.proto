/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package authx;
option go_package = "github.com/nalej/grpc-authx-go";

import "common/entities.proto";
import "authx/entities.proto";
import "organization/entities.proto";
import "user/entities.proto";
import "device/entities.proto";

// Authx service exposing credential information.
service Authx {
    // DeleteCredentials removes all the credential associated to the user.
    rpc DeleteCredentials (DeleteCredentialsRequest) returns (common.Success) {
    }

    // AddBasicCredentials adds a user/password credential.
    rpc AddBasicCredentials (AddBasicCredentialRequest) returns (common.Success) {
    }

    // ChangePassword update an existing password.
    rpc ChangePassword (ChangePasswordRequest) returns (common.Success) {
    }

    // LoginWithBasicCredentials checks if the credentials are valid, and returns a token.
    rpc LoginWithBasicCredentials (LoginWithBasicCredentialsRequest) returns (LoginResponse) {
    }

    // RefreshToken return a new token with a new expiration date.
    rpc RefreshToken (RefreshTokenRequest) returns (LoginResponse) {
    }

    // AddRole add a new role in the system.
    rpc AddRole (Role) returns (common.Success) {
    }

    // EditUserRole edit the role to a specific user.
    rpc EditUserRole (EditUserRoleRequest) returns (common.Success) {
    }

    // ListRoles returns a list of roles inside an organization.
    rpc ListRoles (organization.OrganizationId) returns (RoleList){}

    // Retrieve the role associated with a user.
    rpc GetUserRole(user.UserId) returns (Role){}


    // AddDeviceCredentials adds a device in the system
    rpc AddDeviceCredentials (AddDeviceCredentialsRequest) returns (DeviceCredentials) {}

    // GetDeviceCredentials retrieves the credentials associated with a device.
    rpc GetDeviceCredentials(device.DeviceId) returns (DeviceCredentials){}

    // UpdateDeviceCredentials enable /disable the device
    rpc UpdateDeviceCredentials (UpdateDeviceCredentialsRequest) returns (common.Success) {}

    // RemoveDeviceCredentials removes a credential
    rpc RemoveDeviceCredentials (device.DeviceId) returns (common.Success){}

    // AddDeviceGroupCredentials adds a device in the system
    rpc AddDeviceGroupCredentials (AddDeviceGroupCredentialsRequest) returns (DeviceGroupCredentials) {}

    // GetDeviceGroupCredentials retrieves the credentials associated with a device group.
    rpc GetDeviceGroupCredentials(device.DeviceGroupId) returns (DeviceGroupCredentials){}

    // UpdateDeviceGroupCredentials enable /disable the device
    rpc UpdateDeviceGroupCredentials (UpdateDeviceGroupCredentialsRequest) returns (common.Success) {}

    // RemoveDeviceGroupCredentials removes a group credentials
    rpc RemoveDeviceGroupCredentials (device.DeviceGroupId) returns (common.Success) {}

    // DeviceGroupLogin checks if the device group credentials are valid
    rpc DeviceGroupLogin(DeviceGroupLoginRequest) returns (common.Success) {}

    // DeviceLogin checks if the device credentials are valid and returns a token
    rpc DeviceLogin(DeviceLoginRequest) returns (LoginResponse) {}

    // RefreshDeviceToken return a new token with a new expiration date.
    rpc RefreshDeviceToken (RefreshTokenRequest) returns (LoginResponse) {
    }

    // GetDeviceGroupSecret retrieves the secret associated with a device group
    rpc GetDeviceGroupSecret (device.DeviceGroupId) returns (DeviceGroupSecret){}

}

// Inventory related operations.
service Inventory{
    // CreateEICJoinToken creates an EICJoinToken for new controllers to join the system.
    rpc CreateEICJoinToken (organization.OrganizationId) returns (EICJoinToken){}
    // ValidEICJoinToken checks if the Token provide is still valid to join a EIC.
    rpc ValidEICJoinToken(EICJoinRequest) returns (common.Success){}
}

// Certificate related operations for the different entities of the system.
service Certificates{
    // CreateControllerCert creates a certificate for an edge controller.
    rpc CreateControllerCert(EdgeControllerCertRequest) returns (PEMCertificate){}
}