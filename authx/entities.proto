/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package authx;
option go_package = "github.com/nalej/grpc-authx-go";

//
// Users
//

// UserStatus define a set of status of a user in an account
enum UserStatus {
    PENDING_ACTIVATION = 0;
    // the user accepts the invitation and he is active on it
    ACTIVE = 1;
    // the user receives an invitation to belong/operate into an account
    INVITED = 2;
    // the invitation has expired and the user has not accept/declined it
    INVITE_EXPIRED = 3;
    // the user has no accept the invitation
    DECLINE_INVITE = 4;
    // the user has been deactivated of an account by nalej user
    DEACTIVATED = 5;
}

// AccessPrimitive defines a set of capabilities a role may access.
enum AccessPrimitive {
    // Access to all organization related functionality.
    ORG = 0;
    // Access to all applications related functionality.
    APPS = 1;
    // Access to all resources related functionality.
    RESOURCES = 2;
    // Access to the profile information.
    PROFILE = 3;
    // Access to operations performed by application clusters.
    APPCLUSTEROPS = 4;
    // Device accessing the system
    DEVICE = 5;
    // DevMngr is a user capable of managing device groups and devices
    DEVMNGR = 6;
    // OrgMngt For organization management tasks such as role management, user creation...
    ORG_MNGT = 7;
    // ResourcesMngt For resource management tasks like provisioning and installing clusters, installing an agent...
    RESOURCES_MNGT = 8;
}

// Role defines a role for users of an organization with the associated capabilities
message Role {
    //OrganizationID with the organization identifier
    string organization_id = 1;
    // RoleID with the role identifier
    string role_id = 2;
    // Name of the role
    string name = 3;
    // Internal determines whether the role is internal or not
    bool internal = 4;
    // Primitives list of the role capabilities
    repeated AccessPrimitive primitives = 5;
}
// RoleList list of roles
message RoleList {
    repeated Role roles = 1;
}

// RoleId Role identifier message .
message RoleId {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // RoleID with the role identifier
    string role_id = 2;
}

// AddBasicCredentialRequest is the message that add new credential using login and password.
message AddBasicCredentialRequest {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // Username
    string username = 2;
    // Password
    string password = 3;
    // RoleID with the role identifier
    string role_id = 4;
}

// LoginWithBasicCredentialsRequest is the request for login with basic credentials.
message LoginWithBasicCredentialsRequest {
    // Username
    string username = 1;
    // Password
    string password = 2;
}

// LoginResponse is the message that contains the generated token and the refresh token.
message LoginResponse {
    // Token generated
    string token = 1;
    // Refresh Token
    string refresh_token = 2;
}

// RefreshTokenRequest is the request for refreshing the generated token.
message RefreshTokenRequest {
    // Token
    string token = 1;
    // RefreshToken
    string refresh_token = 2;
}

// EditUserRoleRequest Message for editing a user role.
message EditUserRoleRequest {
    // Username whose role is changed
    string username = 1;
    // NewRoleID new rol of the user
    string new_role_id = 2;
}

// ChangePasswordRequest Message for change the user password.
message ChangePasswordRequest {
    // UserName
    string username = 1;
    // newPassword
    string newPassword = 2;
}

// DeleteCredentialsRequest message to delete the credentials of a user
message DeleteCredentialsRequest {
    // Username
    string username = 1;
}

//
// Device Groups & Devices.
//

// DeviceCredentials Message that contains the device credentials info
message DeviceCredentials {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // DeviceGroupID with the device group identifier
    string device_group_id = 2;
    // DeviceID with the device identifier
    string device_id = 3;
    // Enabled determines if the device can interact with the running applications.
    bool enabled = 4;
    // DeviceApiKey contains the API KEY used by the device to send data.
    string device_api_key = 5;
}


// AddDeviceCredentialsRequest is the request for add a new device credential
message AddDeviceCredentialsRequest {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // DeviceGroupID with the device group identifier
    string device_group_id = 2;
    // DeviceID with the device identifier
    string device_id = 3;
}

// UpdateDeviceCredentialsRequest is the message to Enable/disable the device
message UpdateDeviceCredentialsRequest {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // DeviceGroupID with the device group identifier
    string device_group_id = 2;
    // DeviceID with the device identifier
    string device_id = 3;
    // Enabled flag to enable / disable a device
    bool enabled = 4;
}

// DeviceGroupCredentials message that contains the device group credentials info
message DeviceGroupCredentials {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // DeviceGroupID with the device group identifier
    string device_group_id = 2;
    // Enabled determines if the device can interact with the running applications.
    bool enabled = 3;
    // DefaultDeviceConnectivity determines if the devices are enable or disable by default
    bool default_device_connectivity = 4;
    // DeviceGroupApiKey with the API used by the devices associated to this group for registration purposes.
    string device_group_api_key = 5;
}


// AddDeviceGroupCredentialsRequest, message for add a new device group credential
message AddDeviceGroupCredentialsRequest {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // DeviceGroupID with the device group identifier
    string device_group_id = 2;
    // Enabled determines if this group is able to interact with the running applications.
    bool enabled = 3;
    // DefaultDeviceConnectivity
    //determines whether the devices in a group are created enabled or disabled by default
    bool default_device_connectivity = 4;
}

// UpdateDeviceGroupCredentialsRequest, message to enable/disable the device group
message UpdateDeviceGroupCredentialsRequest {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // DeviceGroupID with the device group identifier
    string device_group_id = 2;
    // UpdateEnabled determines if the flag 'enabled' is going to update
    bool update_enabled = 3;
    // Enabled determines if this group is able (or not) to interact with the running applications.
    bool enabled = 4;
    // UpdateDeviceConnectivity determines if the flag 'DefaultDeviceConnectivity' is going to update
    bool update_device_connectivity = 5;
    //determines whether the devices in a group are created enabled or disabled by default
    bool default_device_connectivity = 6;
}

// DeviceGroupLoginRequest, message to login a group
message DeviceGroupLoginRequest {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // DeviceGroupApiKey with the generated api_key for the device group
    string device_group_api_key = 2;

}

// DeviceLoginRequest, message to login a device
message DeviceLoginRequest {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // DeviceApiKey with the api key retrieved in the registerDevice
    string device_api_key = 2;

}

// DeviceGroupSecret, secret to generate the device group JWT token
message DeviceGroupSecret {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // DeviceGroupID with the device group identifier
    string device_group_id = 2;
    // Secret to generate the JWT token
    string secret = 3;

}

//
// Edge inventory
//

// EICJoinToken with the information required for an EIC to connect with the system. This information
// is generated by the system on request by the user, and the information configured for the EIC to join.
message EICJoinToken{
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // Token to be used by the agent.
    string token = 2;
    // Cacert with the CA certificate.
    string cacert = 3;
    // ExpiresOn indicating the timestamp until which the token may be used.
    int64 expires_on = 4;
}

// EICJoinRequest send by an EIC to join the platform. The information contained in this message is
// provided to the EIC in the form of an EICJoinToken plus extra configuration.
message EICJoinRequest{
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // Token to be used by the agent.
    string token = 2;
}

//
// Certificates
//

// PEMCertificate with the certicate, public key and private key.
message PEMCertificate{
    // Certificate content
    string certificate = 1;
    // PrivateKey for the certificate
    string private_key = 2;
}

// EdgeControllerCertRequest with the elements required to create the certificate for an edge controller.
message EdgeControllerCertRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // EdgeControllerId with the EIC identifier.
    string edge_controller_id = 2;
    // Name of the EIC.
    string name = 3;
    // IP where the edge controller accepts agent connections.
    repeated string ips = 4;
}

// UserAuthxInfo
message UserAuthxInfo{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // RoleId with the id of the role
    string role_id = 2;
    // InternalRole if it is an internal role
    bool internal_role = 3;
    // RolePrimitives with a list of the access primitives
    repeated AccessPrimitive role_primitives = 4;
    // LastLogin with the timestamp of the last login of the user
    int64 last_login = 5;
}

message MonitoringClientCertificate{
    // CreationTime with the creation timestamp of the certificate.
    int64 creation_time = 1;
    // ExpirationTime with the expiration timestamp of the certificate.
    int64 expiration_time = 2;
    // MonitoringClientCertificateId with the ID of the created certificate.
    string monitoring_client_certificate_id = 3;
}

message CreateMonitoringClientCertificateRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
}

message CreateMonitoringClientCertificateResponse{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // MonitoringClientCertificateInfo with the created certificate information.
    string client_certificate_info = 2;
    // MonitoringClientCertificate with the created certificate info.
    PEMCertificate client_certificate = 3;
    // MonitoringCaCertificate with the info of the Nalej CA.
    string ca_certificate = 4;
}

message ListMonitoringClientCertificateRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
}

message ListMonitoringClientCertificateResponse{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // MonitoringClientCertificates with a list of the monitoring certificates of the organization.
    repeated MonitoringClientCertificate certificates = 2;
}

message ValidateMonitoringClientCertificateRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // MonitoringClientCertificateId with the ID of the certificate to be deleted.
    string certificate_id = 2;
}

message RevokeMonitoringClientCertificateRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // MonitoringClientCertificateId with the ID of the certificate to be deleted.
    string certificate_id = 2;
}
