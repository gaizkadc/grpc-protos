/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package network;
option go_package = "github.com/nalej/grpc-network-go";

import "common/entities.proto";
import "organization/entities.proto";

message Network {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // NetworkId with the cluster identifier.
    string network_id = 2;
    // Name of the network.
    string name = 3;
    // Timestamp of the network creation
    int64 creation_timestamp = 4;
}

message NetworkId {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // NetworkId with the network identifier.
    string network_id = 2;
}

message AddNetworkRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppInstanceId with the application identifier.
    string app_instance_id = 2;
    // Name of the network.
    string name = 3;
    // FQDN and corresponding VirtualServiceAddresses for this network
    map<string, string> vsa = 4;
}

message DeleteNetworkRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppInstanceId with the network identifier.
    string app_instance_id = 2;
}

message NetworkList {
    repeated Network networks = 1;
}

message AuthorizeMemberRequest {
    // Organization ID
    string organization_id = 1;
    // Network ID
    string network_id = 2;
    // Member ID to jointhe network
    string member_id = 3;
    // Application instance id
    string app_instance_id = 4;
    // Service group instance id
    string service_group_instance_id = 5;
    // Service application instance id
    string service_application_instance_id = 6;
    // IsProxy set this entry as a proxy
    bool is_proxy = 7;
}

message DisauthorizeMemberRequest {
    // Organization ID
    string organization_id = 1;
    // Application instance id
    string app_instance_id = 2;
    // Service group instance id
    string service_group_instance_id = 3;
    // Service application instance id
    string service_application_instance_id = 4;
}

// AddDNSEntryRequest message sent by conductor when a service is deployed.
message AddDNSEntryRequest {
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // Application instance
    string app_instance_id = 2;
    // ServiceGroupId with the service group identifier of the descriptor.
    string service_group_id = 3;
    // ServiceId with the service identifier of the descriptor.
    string service_id = 4;
    // Service name
    string service_name = 5;
    // FQDN from the DNS entry.
    string fqdn = 6;
    // IP of that FQDN.
    string ip = 7;
    // Tags for this entry
    repeated string tags = 8;
}

message DeleteDNSEntryRequest {
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // Application instance
    string app_instance_id = 2;
    // ServiceGroupId with the service group identifier of the descriptor.
    string service_group_id = 3;
    // ServiceId with the service identifier of the descriptor.
    string service_id = 4;
    // Service name
    string service_name = 5;
    // Tags for this entry
    repeated string tags = 6;
}

message DNSEntry {
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // NetworkId with the network identifier.
    string network_id = 2;
    // FQDN from the DNS entry.
    string fqdn = 3;
    // IP of that FQDN.
    string ip = 4;
    // Tags for this entry
    repeated string tags = 5;
}

message DNSEntryList {
    repeated DNSEntry dns_entries = 1;
}

//
// Service DNS
//

// AddServiceDNSEntryRequest message with the information required to add a new entry for an internal service.
message AddServiceDNSEntryRequest{
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // FQDN from the DNS entry.
    string fqdn = 2;
    // IP of that FQDN.
    string ip = 3;
    // Tags of the entry.
    repeated string tags = 4;
}

// DeleteServiceDNSEntryRequest message with the information required to delete an entry.
message DeleteServiceDNSEntryRequest{
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // FQDN from the DNS entry.
    string fqdn = 2;
    // Tags of the entry.
    repeated string tags = 3;
}

// ServiceDNSEntry message with the information of a single service entry in the DNS.
message ServiceDNSEntry{
    // OrganizationId with the organization identifier
    string organization_id = 1;
    // FQDN from the DNS entry.
    string fqdn = 2;
    // IP of that FQDN.
    string ip = 3;
    // Tags of the entry.
    repeated string tags = 4;
}

// ServiceDNSEntryList message with a list of ServiceDNSEntry.
message ServiceDNSEntryList{
    repeated ServiceDNSEntry entries = 1;
}


//
// Application Network
//

// InboundServiceProxy message sent when a new Proxy service is launched so that we can update
// the networking rules of all outbound elements.
message InboundServiceProxy{
    // Organization ID
    string organization_id = 1;
    // Cluster ID where the service is deployed.
    string cluster_id = 2;
    // Application descriptor id
    string app_descriptor_id = 3;
    // Application instance id
    string app_instance_id = 4;
    // Service group instance id
    string service_group_id = 5;
    // Service id
    string service_id = 6;
    // Service group instance id
    string service_group_instance_id = 7;
    // Service instance id
    string service_instance_id = 8;
    // IP address inside the vpn the service is connected as.
    string ip = 9;
    // FQDN for the proxy
    string fqdn = 10;
}

// OutboundService message sent by a sidecar ZT proxy to receive updates on the rules.
message OutboundService{
    // Organization ID
    string organization_id = 1;
    // Cluster ID where the service is deployed.
    string cluster_id = 2;
    // Application instance id
    string app_instance_id = 3;
    // Service group instance id
    string service_group_instance_id = 4;
    // Service application instance id
    string service_instance_id = 5;
}


// Message to authorize an instance in a zt network
message AuthorizeZTConnectionRequest {
    // organization id
    string organization_id = 1;
    // Application instance
    string app_instance_id = 2;
    // Network to join
    string network_id = 3;
    // MemberId  to join the network
    string member_id = 4;
}

message RegisterZTConnectionRequest {
    // organization id
    string organization_id = 1;
    // Application instance
    string app_instance_id = 2;
    // ZtIp with the ZT IP in the ZT network
    string zt_ip = 3;
    // Network ZT network identifier
    string network_id = 4;
    // MemberId
    string member_id = 5;
    // Flag to indicate if role of the instance in the connection (inbound or outbound)
    bool is_inbound = 6;
    // ClusterID with the cluster identifier where the pod is deployed on
    string cluster_id = 7;
    // ServiceID
    string service_id = 8;
}