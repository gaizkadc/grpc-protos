/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package network;
option go_package = "github.com/nalej/grpc-network-go";

import "application-network/entities.proto";
import "common/entities.proto";
import "network/entities.proto";
import "organization/entities.proto";

// Network service definition
service Networks {
    // AddNetwork adds a new network to the system.
    rpc AddNetwork(AddNetworkRequest) returns (Network){}
    // GetNetwork retrieves the network info of a specified network.
    rpc GetNetwork(NetworkId) returns (Network){}
    // DeleteNetwork deletes a specified network from the system.
    rpc DeleteNetwork(DeleteNetworkRequest) returns (common.Success){}
    // ListNetworks lists all the networks from an organization.
    rpc ListNetworks(organization.OrganizationId) returns (NetworkList){}
    // Authorize member
    rpc AuthorizeMember(AuthorizeMemberRequest) returns (common.Success){}
    // AuthorizeZTConnection A pod requests authorization to join a secondary ZT Network
    rpc AuthorizeZTConnection(AuthorizeZTConnectionRequest) returns(common.Success) {}
}

// DNS service definition
service DNS {
    // ListEntries lists all the DNS entries from a network.
    rpc ListEntries(organization.OrganizationId) returns (DNSEntryList){}
    // AddDNSEntry creates a new DNSEntry on the system.
    rpc AddDNSEntry(AddDNSEntryRequest) returns (common.Success){}
    // DeleteDNSEntry deletes a DNSEntry from the system.
    rpc DeleteDNSEntry(DeleteDNSEntryRequest) returns (common.Success){}
}

// ServiceDNS in charge of DNS entries used for different services of the platform
// not for application networks.
service ServiceDNS {
    // AddEntry adds a new entry.
    rpc AddEntry(AddServiceDNSEntryRequest) returns (common.Success){}
    // DeleteEntry deletes a given entry.
    rpc DeleteEntry(DeleteServiceDNSEntryRequest) returns (common.Success){}
    // ListEntries lists all the DNS entries from an organization.
    rpc ListEntries(organization.OrganizationId) returns (ServiceDNSEntryList){}
}

service ApplicationNetwork{
    // RegisterInboundServiceProxy operation to update rules based on new service proxy being created.
    rpc RegisterInboundServiceProxy(InboundServiceProxy) returns (common.Success){}
    // RegisterOutboundProxy operation to retrieve existing networking rules.
    rpc RegisterOutboundProxy(OutboundService) returns (common.Success){}
    // AddConnection adds a new connection between one outbound and one inbound
    rpc AddConnection (application_network.AddConnectionRequest) returns (common.Success) {}
    // RemoveConnection removes a connection
    rpc RemoveConnection (application_network.RemoveConnectionRequest) returns (common.Success) {}
    // RegisterZTConnection operation to indicate that the inbound or outbound  are within the ztNetwork
    rpc RegisterZTConnection(RegisterZTConnectionRequest) returns (common.Success){}
}
