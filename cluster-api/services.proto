/*
 * Copyright (C) 2018 Nalej - All Rights Reserved
 */

syntax = "proto3";

package cluster_api;
option go_package = "github.com/nalej/grpc-cluster-api-go";

import "common/entities.proto";
import "conductor/entities.proto";
import "network/entities.proto";
import "authx/entities.proto";
import "device/entities.proto";
import "device-controller/entities.proto";

// Conductor operations.
service Conductor{
    // Request to update a fragment plan status with all the corresponding services
    rpc UpdateDeploymentFragmentStatus(conductor.DeploymentFragmentUpdateRequest) returns(common.Success) {}
    // Update the status of a set of services during a given fragment deployment
    rpc UpdateServiceStatus(conductor.DeploymentServiceUpdateRequest) returns (common.Success) {}
}

// Network manager operations.
service NetworkManager {
    // Authorize member
    rpc AuthorizeMember(network.AuthorizeMemberRequest) returns (common.Success){}
    // AddDNSEntry creates a new DNSEntry on the system.
    rpc AddDNSEntry(network.AddDNSEntryRequest) returns (common.Success){}
    // RegisterInboundServiceProxy operation to update rules based on new service proxy being created.
    rpc RegisterInboundServiceProxy(network.InboundServiceProxy) returns (common.Success){}
    // RegisterOutboundProxy operation to retrieve existing networking rules.
    rpc RegisterOutboundProxy(network.OutboundService) returns (common.Success){}
}

// DeviceManager operations
service DeviceManager {
    // RegisterLatency register a device latency
    rpc RegisterLatency (device_controller.RegisterLatencyRequest) returns (common.Success) {}
    // GetDeviceGroupSecret retrieves the secret associated with a device group
    rpc GetDeviceGroupSecret (device.DeviceGroupId) returns (authx.DeviceGroupSecret){}
}
