/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package cluster_api;
option go_package = "github.com/nalej/grpc-cluster-api-go";

import "common/entities.proto";
import "conductor/entities.proto";
import "network/entities.proto";
import "authx/entities.proto";
import "device/entities.proto";
import "device-controller/entities.proto";
import "infrastructure/entities.proto";
import "cluster-watcher/entities.proto";

// Conductor operations.
service Conductor{
    // Request to update a fragment plan status with all the corresponding services
    rpc UpdateDeploymentFragmentStatus(conductor.DeploymentFragmentUpdateRequest) returns(common.Success) {}
    // Update the status of a set of services during a given fragment deployment
    rpc UpdateServiceStatus(conductor.DeploymentServiceUpdateRequest) returns (common.Success) {}
}

// Network manager operations.
service NetworkManager {
    // Authorize member
    rpc AuthorizeMember(network.AuthorizeMemberRequest) returns (common.Success){}
    // AddDNSEntry creates a new DNSEntry on the system.
    rpc AddDNSEntry(network.AddDNSEntryRequest) returns (common.Success){}
    // RegisterInboundServiceProxy operation to update rules based on new service proxy being created.
    rpc RegisterInboundServiceProxy(network.InboundServiceProxy) returns (common.Success){}
    // RegisterOutboundProxy operation to retrieve existing networking rules.
    rpc RegisterOutboundProxy(network.OutboundService) returns (common.Success){}
    // AuthorizeZTConnection A pod requests authorization to join a secondary ZT Network
    rpc AuthorizeZTConnection(network.AuthorizeZTConnectionRequest) returns(common.Success) {}
    // RegisterZTConnection operation to indicate that the inbound or outbound  are within the ztNetwork
    rpc RegisterZTConnection(network.RegisterZTConnectionRequest) returns (common.Success){}
}

// DeviceManager operations
service DeviceManager {
    // RegisterLatency register a device latency
    rpc RegisterLatency (device_controller.RegisterLatencyRequest) returns (common.Success) {}
    // GetDeviceGroupSecret retrieves the secret associated with a device group
    rpc GetDeviceGroupSecret (device.DeviceGroupId) returns (authx.DeviceGroupSecret){}
}

// Connectivity-checker operations
service ConnectivityChecker {
    // ClusterAlive checks if a cluster is alive and returns a success if it is
    rpc ClusterAlive (infrastructure.ClusterId) returns (common.Success) {}
}

// Cluster watcher service running in the management cluster.
service ClusterWatcherMaster {
    // Request an application deployment to be done on top of Nalej.
    rpc AddClusterInfo(cluster_watcher.ClusterWatchInfo) returns (common.Success) {}
}
