/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package storage_fabric;
option go_package = "github.com/nalej/grpc-storage-fabric-go";

// CreateStorageClassRequest message containing the information required to create a new storage
// class in the storage fabric subsystem.
message CreateStorageClassRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppInstanceId with the identifier of the requesting application instance.
    string app_instance_id = 2;
    // ServiceInstanceId with the identifier of the service instance that will be using the storage class.
    string service_instance_id = 3;
    // StorageClassName with the name identifying the storage class. This value must be completed by the
    // calling components.
    string storage_class_name = 4;
    // Replicas with the number of replicas for the given storage class / pool.
    int32 replicas = 5;
    // Size requested on the storage class / pool.
    int64 size = 6;
}

// StorageRequest with a possible request to the storage fabric.
message StorageRequest {
    // RequestedSize with the total size requested when evaluating the deployment of an application fragment.
    int64 requested_size = 6;
}

// UpdateStorageClassRequest message to update different attributes on an existing storage class.
message UpdateStorageClassRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppInstanceId with the identifier of the requesting application instance.
    string app_instance_id = 2;
    // ServiceInstanceId with the identifier of the service instance that is using the storage class.
    string service_instance_id = 3;
    // StorageClassName with the name identifying the storage class.
    string storage_class_name = 4;
    // UpdateReplicas flag to indicate that the number of replicas should be modified.
    bool update_replicas = 5;
    // Replicas with the new number of replicas for the given storage class / pool.
    int32 replicas = 6;
}

// StorageClassId message identifying a given storage class.
message StorageClassId {
    // StorageClassName with the name identifying the storage class. This value is generated by the
    // calling components.
    string storage_class_name = 1;
}

// StorageClassStats message containing statistics about the usage of a given storage class and
// associated pool.
message StorageClassStats {
    // StorageClassName with the name identifying the storage class.
    string storage_class_name = 1;
    // CephPoolId with the identifier of the underlying Ceph pool.
    string ceph_pool_id = 2;
    double bytes_used = 3;
    double raw_bytes_used = 4;
    // RawBytesRemaining with the bytes remaining physically.
    double raw_bytes_remaining = 5;
    // Objects in the storage class.
    int32 objects = 6;
    int32 dirty_objects = 7;
    // ReadIop with the number of read operations since the creation of the storage class.
    double read_iop = 8;
    // ReadBytes with the number of bytes read since the creation of the storage class.
    double read_bytes = 9;
    // WriteIop with the number of write operations since the creation of the storage class.
    double write_iop = 10;
    // WriteBytes with the number of bytes written since the creation of the storage class.
    double write_bytes = 11;
}


