/*
 * Copyright 2018 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package device;
option go_package = "github.com/nalej/grpc-device-go";

// DeviceGroup message defining the concept of a device group. A device group represents a collection
// of individual devices in order to facilitate the connectivity with other elements of the system.
message DeviceGroup {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // Name of the device group.
    string name = 3;
    // GroupApiKey with the API used by the devices associated to this group for registration purposes.
    string group_api_key = 4;
    // Enabled determines if this group is able to interact with the running applications.
    bool enabled = 5;
    // Labels defined by the user.
    map<string, string> labels = 6;
}

// Device message representing a remote device (e.g., IoT sensor, mobile app, etc.) that will send data
// to an application running in the platform.
message Device {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // DeviceId with the device identifier.
    string device_id = 3;
    // SerialNumber of the current device for identification purposes.
    string serial_number = 4;
    // RegisterSince is the timestamp when the device joined the group.
    int64 register_since = 5;
    // Enabled determines if the device can interact with the running applications.
    bool enabled = 6;
    // DeviceApiKey contains the API KEY used by the device to send data.
    string device_api_key = 7;
    // Labels defined by the user.
    map<string, string> labels = 8;
}

message DeviceGroupList {
    repeated DeviceGroup groups = 1;
}

message AddDeviceGroupRequest {
    string request_id = 1;
    // OrganizationId with the organization identifier.
    string organization_id = 2;
    // Name of the device group.
    string name = 3;
    // Labels defined by the user.
    map<string, string> labels = 6;
}


