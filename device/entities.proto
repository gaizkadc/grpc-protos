/*
 * Copyright (C) 2018 Nalej - All Rights Reserved
 */

syntax = "proto3";

package device;
option go_package = "github.com/nalej/grpc-device-go";

import "inventory/entities.proto";

// DeviceGroup message defining the concept of a device group. A device group represents a collection
// of individual devices in order to facilitate the connectivity with other elements of the system.
message DeviceGroup {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // Name of the device group.
    string name = 3;
    // Created time
    int64 created = 4;
    // Labels defined by the user.
    map<string, string> labels = 5;
}

// Device message representing a remote device (e.g., IoT sensor, mobile app, etc.) that will send data
// to an application running in the platform.
message Device {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // DeviceId with the device identifier.
    string device_id = 3;
    // RegisterSince is the timestamp when the device joined the group.
    int64 register_since = 4;
    // Labels defined by the user.
    map<string, string> labels = 5;
    // location with the device location
    inventory.InventoryLocation location = 6;
}

// DeviceGroupId Message that contains the fields to identifier the device group
message DeviceGroupId {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
}

// DeviceGroupList Message that contains a list of device groups
message DeviceGroupList {
    repeated DeviceGroup groups = 1;
}

// RemoveDeviceGroupRequest remove a device group
message RemoveDeviceGroupRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
}

// AddDeviceGroupRequest add a device group in the system
message AddDeviceGroupRequest {
    string request_id = 1;
    // OrganizationId with the organization identifier.
    string organization_id = 2;
    // Name of the device group.
    string name = 3;
    // Labels defined by the user.
    map<string, string> labels = 6;
}

// GetDeviceGroupsRequest returns the devices info of an organization that match the names
message GetDeviceGroupsRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // Name of the device group.
    repeated string device_group_names = 2;
}

// AddDeviceRequest add a device in the system
message AddDeviceRequest {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // DeviceGroupID with the device group identifier
    string device_group_id = 2;
    //DeviceId with the device identifier provided by the IoT SDK
    string device_id = 3;
    // Labels defined by the user
    map<string, string> labels = 4;
}

// DeviceId message that contains the fields to identifier a device
message DeviceId {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // DeviceId with the device identifier.
    string device_id = 3;
}

// DeviceList list of devices
message DeviceList {
    repeated Device devices = 1;
}

// RemoveDeviceRequest remove a device from the system
message RemoveDeviceRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // DeviceId with the device identifier.
    string device_id = 3;
}

// UpdateDeviceRequest update the device labels
message UpdateDeviceRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // DeviceId with the device identifier.
    string device_id = 3;
    // Add Label flag to indicate that the set of labels need to be added.
    bool add_labels = 4;
    // Remove label flag to indicate that the set of labels need to be removed.
    bool remove_labels = 5;
    // Labels for the device.
    map <string, string> labels = 6;
    // UpdateLocation flag to indicate that location needs to be updated
    bool update_location = 7;
    // location with the device location
    inventory.InventoryLocation location = 8;
}