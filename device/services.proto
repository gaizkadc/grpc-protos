/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package device;
option go_package = "github.com/nalej/grpc-device-go";

import "device/entities.proto";
import "organization/entities.proto";
import "common/entities.proto";

service Devices {
    // AddDeviceGroup adds a new device group to the system.
    rpc AddDeviceGroup(device.AddDeviceGroupRequest) returns (device.DeviceGroup) {}
    // ListDeviceGroups obtains a list of device groups in an organization.
    rpc ListDeviceGroups(organization.OrganizationId) returns (device.DeviceGroupList) {}
    // GetDeviceGroupsByNames obtains a list the device groups .
    rpc GetDeviceGroupsByNames(device.GetDeviceGroupsRequest) returns (device.DeviceGroupList) {}
    // GetDeviceGroup retrieves a given device group in an organization.
    rpc GetDeviceGroup (device.DeviceGroupId) returns (device.DeviceGroup) {}
    // RemoveDeviceGroup removes a device group
    rpc RemoveDeviceGroup (device.RemoveDeviceGroupRequest) returns (common.Success){}

    // AddDevice adds a new group to the system
    rpc AddDevice (device.AddDeviceRequest) returns (device.Device) {}
    // ListDevice obtains a list of devices in a device_group
    rpc ListDevices (device.DeviceGroupId) returns (device.DeviceList) {}
    //GetDevice retrieves a given device in an organization.
    rpc GetDevice (device.DeviceId) returns (device.Device) {}
    // RemoveDevice removes a given device
    rpc RemoveDevice(device.RemoveDeviceRequest) returns (common.Success) {}
    // UpdateDevice updates the information of a device (labels)
    rpc UpdateDevice(device.UpdateDeviceRequest) returns (device.Device) {}
}