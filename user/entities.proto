/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package user;
option go_package = "github.com/nalej/grpc-user-go";

// User model the information available regarding a User of an organization
message User {
    // OrganizationID deprecated, in v.0.5.0 this field will be deleted
    string organization_id = 1 [deprecated=true];
    string email = 2;
    string name = 3;
    string photo_url = 4;
    int64 member_since = 5;
    ContactInfo contact_info = 6;
}

// ContactInfo with the contact info of a user
message ContactInfo {
    string full_name = 1;
    string address = 2;
    map <string, string> phone = 3;
    string alt_email = 4;
    string company_name = 5;
    string title = 6;
}

// UserId with the email identifying a user.
message UserId {
    string organization_id = 1 [deprecated=true];
    string email = 2;
}

// AddUserRequest message with the information required to add a user to the platform.
message AddUserRequest {
    string organization_id = 1 [deprecated=true];
    string email = 2;
    string password = 3;
    string name = 4;
    string photo_url = 5;
    string full_name = 6;
    string address = 7;
    map <string, string> phone = 8;
    string alt_email = 9;
    string company_name = 10;
    string title = 11;
}

// RemoveUserRequest message with the information required to remove a user from the platform.
message RemoveUserRequest {
    string organization_id = 1;
    string email = 2;
}

// UserList message with a list of users.
message UserList {
    repeated User users = 1;
}

// UpdateUserRequest message with the information required for updating an user.
message UpdateUserRequest {
    string organization_id = 1 [deprecated=true];
    string email = 2;
    bool update_name = 3;
    string name = 4;
    bool update_photo_url = 5;
    string photo_url = 6;
    bool update_last_name = 7;
    string last_name = 8;
    bool update_title = 9;
    string title = 10;
    bool uodate_phone = 11;
    string phone = 12;
    bool update_location = 13;
    string location = 14;
    string photo_base64 = 15;
}

// UpdateContactInfoRequest message with the information required for updating the contact info of a user
message UpdateContactInfoRequest {
    string email = 1;
    string full_name = 2;
    string address = 3;
    map <string, string> phone = 4;
    string alt_email = 5;
    string company_name = 6;
    string title = 7;
}


// --------------------
// AccountUser

// UserStatus define a set of status of a user in an account
// This enum is copied as to avoid conflicts with Authx and cross references
enum UserStatus {
    PENDING_ACTIVATION = 0;
    // the user accepts the invitation and he is active on it
    ACTIVE = 1;
    // the user receives an invitation to belong/operate into an account
    INVITED = 2;
    // the invitation has expired and the user has not accept/declined it
    INVITE_EXPIRED = 3;
    // the user has no accept the invitation
    DECLINE_INVITE = 4;
    // the user has been deactivated of an account by nalej user
    DEACTIVATED = 5;
}

// AccountUser message with the information of the status of a user in an account
message AccountUser {
    // AccountId with the identifier of the account
    string account_id = 1;
    // Email user identifier
    string email = 2;
    // RoleId with identifier of the rol the user has in this account
    string role_id = 3;
    bool internal = 4;
    // Status determines the state of the user in the account (invited, active...)
    UserStatus status = 5;
}

message AddAccountUserRequest {
    // AccountId with the identifier of the account
    string account_id = 1;
    // Email user identifier
    string email = 2;
    // RoleId with identifier of the rol the user has in this account
    string role_id = 3;
    bool internal = 4;
    // Status determines the state of the user in the account (invited, active...)
    UserStatus status = 5;
}

message AccountUserId {
    // AccountId with the identifier of the account
    string account_id = 1;
    // Email user identifier
    string email = 2;
}

message AccountUserList {
    repeated AccountUser accounts_user = 1;
}

message AccountUserUpdateRequest {
    // AccountId with the identifier of the account
    string account_id = 1;
    // Email user identifier
    string email = 2;
    // UpdateRoleId flag to indicate the role_id will be updated
    bool update_role_id = 3;
    // RoleId with identifier of the rol the user has in this account
    string role_id = 4;
    // UpdateStatus flag to indicate the status will be updated
    bool update_status = 5;
    // Status determines the state of the user in the account (invited, active...)
    UserStatus status = 6;
}

// --------------------
// AccountUserInvite

message AccountUserInvite {
    // AccountId with the identifier of the account
    string account_id = 1;
    // Email user identifier
    string email = 2;
    // RoleId with identifier of the role the user has in this account
    string role_id = 3;
    // RoleName with the name of the Role
    string role_name = 4;
    // Invited by user email who send the invitation
    string invited_by = 5;
    // Msg message the user sent to invite
    string msg = 6;
    // Expires time when the invitation expires
    int64 expires = 7;
}

message AccountInviteList {
    repeated AccountUserInvite account_user_invites = 1;
}

message AddAccountInviteRequest {
    // AccountId with the identifier of the account
    string account_id = 1;
    // Email user identifier
    string email = 2;
    // RoleId with identifier of the rol the user has in this account
    string role_id = 3;
    // RoleName with the name of the Role
    string role_name = 4;
    // Invited by user email who send the invitation
    string invited_by = 5;
    // Msg message the user sent to invite
    string msg = 6;
    // Expires time when the invitation expires
    int64 expires = 7;
}

message AccountUserInviteId {
    // AccountId with the identifier of the account
    string account_id = 1;
    // Email user identifier
    string email = 2;
}

// --------------------
// ProjectUser

message ProjectUser {
    // AccountId with the identifier of the account to which the project belongs
    string account_id = 1;
    // ProjectId with the project identifier
    string project_id = 2;
    // Email user identifier
    string email = 3;
    // RoleId with identifier of the rol the user has in this project
    string role_id = 4;
    bool internal = 5;
    // Status determines the state of the user in the project (invited, active...)
    UserStatus status = 6;
}

message AddProjectUserRequest{
    // AccountId with the identifier of the account to which the project belongs
    string account_id = 1;
    // ProjectId with the project identifier
    string project_id = 2;
    // Email user identifier
    string email = 3;
    // RoleId with identifier of the rol the user has in this project
    string role_id = 4;
    // RoleName with the name of the Role
    string role_name = 5;
    bool internal = 6;
    // Status determines the state of the user in the project (invited, active...)
    UserStatus status = 7;
}

message ProjectUserList {
    repeated ProjectUser projects_user = 1;

}

message ProjectUserId {
    // AccountId with the identifier of the account to which the project belongs
    string account_id = 1;
    // ProjectId with the project identifier
    string project_id = 2;
    // Email user identifier
    string email = 3;
}

message ProjectUserUpdateRequest {
    // AccountId with the identifier of the account to which the project belongs
    string account_id = 1;
    // ProjectId with the project identifier
    string project_id = 2;
    // Email user identifier
    string email = 3;
    // UpdateRoleId flag to indicate if RoleId will be updated
    bool update_role_id = 4;
    // RoleId with identifier of the rol the user has in this project
    string role_id = 5;
    // UpdateStatus flag to indicate if Status will be updated
    bool update_status = 6;
    // Status determines the state of the user in the project (invited, active...)
    UserStatus status = 7;
}

// --------------------
// ProjectUserInvites
message ProjectUserInvite {
    // AccountId with the identifier of the account
    string account_id = 1;
    // ProjectId with the project identifier
    string project_id = 2;
    // Email user identifier
    string email = 3;
    // RoleId with identifier of the rol the user has in this account
    string role_id = 4;
    // RoleName with the name of the Role
    string role_name = 5;
    // Invited by user email who send the invitation
    string invited_by = 6;
    // Msg message the user sent to invite
    string msg = 7;
    // Expires time when the invitation expires
    int64 expires = 8;
}

message AddProjectInviteRequest {
    // AccountId with the identifier of the account
    string account_id = 1;
    // ProjectId with the project identifier
    string project_id = 2;
    // Email user identifier
    string email = 3;
    // RoleId with identifier of the rol the user has in this account
    string role_id = 4;
    // Invited by user email who send the invitation
    string invited_by = 5;
    // Msg message the user sent to invite
    string msg = 6;
    // Expires time when the invitation expires
    int64 expires = 7;
}

message ProjectUserInviteId {
    // AccountId with the identifier of the account
    string account_id = 1;
    // ProjectId with the project identifier
    string project_id = 2;
    // Email user identifier
    string email = 3;
}

message ProjectInviteList {
    repeated ProjectUserInvite project_user_invites = 1;
}