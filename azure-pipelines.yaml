variables:
  - group: ssh-credentials
  - group: common-vars
  - group: slack-webhooks
  - name: gitHostName
    value: "git@github.com:nalej"
  - name: mergeCommit
    value: ""
  - name: modifiedDirectories
    value: ""
  - name: authorName
    value: ""

resources:
  repositories:
    - repository: ci_templates
      type: github
      name: nalej/ci-templates
      endpoint: nalej

jobs:
- job: DeployComponent
  pool:
    vmImage: 'Ubuntu-16.04'
  
  steps:
  - template: misc/variables.yaml@ci_templates
      
  - template: git/setup.yaml@ci_templates
    parameters:
      sshHostName: $(hostName)
      sshPublicKey: $(sshPublicKey)
  
  - script: |
      merge_offset=1
      git_last_commit=$(Build.SourceVersion)
      git_last_merge_commit=$(git log --merges -n $merge_offset --pretty=format:"%H")
      if [ "$git_last_commit" == "$git_last_merge_commit" ]; then
        merge_offset=$(($merge_offset + 1))
      fi
      merge_found=0
      while [ $merge_found -eq 0 ]; do
        $merge_log=$(git log --merges -n $merge_offset --pretty=format:"%s" | awk -v nr="$merge_offset" '{if (NR==nr) print $0}')
        if [[ "$$merge_log" == *"Merge branch 'master' into"* ]]; then
          merge_offset=$(($merge_offset + 1))
        elif [[ "$$merge_log" == *"of github.com:"* ]]; then
          merge_offset=$(($merge_offset + 1))
        else
          git_last_merge_commit=$(git log --merges -n $merge_offset --pretty=format:"%H" | awk -v nr="$merge_offset" '{if (NR==nr) print $0}')
          echo '##vso[task.setvariable variable=mergeCommit]'$git_last_merge_commit
          merge_found=1
        fi
      done
      echo "Looking for differences between $git_last_merge_commit (last merge commit) and $git_last_commit (HEAD commit)"
    displayName: Look for the last real merge commit
  
  - script: |
      modified_dirs=$(git diff --name-only $(Build.SourceVersion) $(mergeCommit) | grep "^.*\/.*.proto$" | awk -F/ '{print $1}' | uniq)
      echo '##vso[task.setvariable variable=modifiedDirectories]'$modified_dirs
      if [ "$modified_dirs" == "" ]; then
        echo "No modified directories detected"
      else
        echo "Detected directories to generate:"
        echo $modified_dirs
      fi
    displayName: Get changed protobuf directories from last merge until now
      
  - template: slack/protobuf/start.yaml@ci_templates
    parameters:
      author: $(authorName)
      modifiedDirectories: $(modifiedDirectories)
      buildUrl: $(buildUrl)$(Build.BuildId)
      slackWebhook: $(slackCIProtobuf)

  - script: |
      echo "Checking if we need to download the docker image"
      docker pull namely/protoc-all:1.15 > /dev/null 2>&1
      for protobuf in $(modifiedDirectories); do
        cd $protobuf
        if [ -f .protolangs ]; then
          while read lang; do
            docker_output=$(docker run -v $(system.defaultWorkingDirectory):/defs namely/protoc-all:1.15 -d $protobuf -i . -i /usr/local/include/google -o $protobuf/pb-$lang -l $lang --with-docs --with-gateway)
            if [ $? -ne 0 ]; then
              echo "##vso[task.logissue type=error]Error generating protobufs of $protobuf for $lang language.%0D%0ACommand output:%0D%0A${docker_output//$'\n'/'%0D%0A'}%0D%0AError CIE0027"
              echo "##vso[task.complete result=Failed;]"
            fi
            echo $docker_output
            echo $docker_output >> ../protobuf_generation_output
          done < .protolangs
        fi
        cd $(system.defaultWorkingDirectory)
      done
    displayName: Generate protobufs for the modified directories
    condition: and(succeeded(), ne(variables['modifiedDirectories'], ''))

  - script: |
      mkdir -p dist
      for protobuf in $(modifiedDirectories); do
        if [ -f $protobuf/.protolangs ]; then
          while read lang; do
            repositoryName="grpc-$protobuf-$lang"
            git clone $(gitHostName)/$repositoryName.git dist/$repositoryName
            if [ $? -ne 0 ]; then
              echo "##vso[task.logissue type=error]Error cloning repository $repositoryName. Please check that the repository exists.%0D%0AError CIE0028"
              echo "##vso[task.complete result=Failed;]"
            fi

            cp -R $protobuf/pb-$lang/github.com/nalej/$repositoryName/* dist/$repositoryName/
            cp -R $protobuf/pb-$lang/doc dist/$repositoryName/
            cp -R $protobuf/pb-$lang/$protobuf/*.swagger.json dist/$repositoryName/doc/.
          done < $protobuf/.protolangs
        fi
      done
    displayName: Clone modified protobuf repositories and copy new versions
    condition: and(and(succeeded(), ne(variables['modifiedDirectories'], '')), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - script: |
      for directory in $(find . -maxdepth 1 -type d \( ! -name . \))
      do
        cd $directory
        if [ ! -f VERSION ]; then
          echo "Creating initial version"
          echo "0.0.0" > VERSION
        fi
        current_version=$(cat VERSION)
        version_values=$(echo $current_version | tr '.' ' ')
        major_version=${version_values[0]}
        minor_version=${version_values[1]}
        patch_version=${version_values[2]}
        patch_version=$((patch_version + 1))
        new_version="${major_version}.${minor_version}.${patch_version}"
        echo "New version will be ${new_version}"
        echo $new_version > VERSION
        git add . >> ../git_publish_output 2>&1 && \
        git commit -m "Auto generated gRPC" >> ../git_publish_output 2>&1 && \
        git push origin HEAD >> ../git_publish_output 2>&1 && \
        git tag -a -m "Auto generated version ${new_version}." "v$new_version" >> ../git_publish_output 2>&1 && \
        git push origin --tags >> ../git_publish_output 2>&1

        if [ $? -ne 0 ]; then
          git_output=$(cat ../git_publish_output)
          rm -rf ../git_publish_output
          echo "##vso[task.logissue type=error]Error pushing changes to $directory repository..%0D%0ACommand output:%0D%0A${git_publish_output//$'\n'/'%0D%0A'}%0D%0AError CIE0028"
          echo "##vso[task.complete result=Failed;]"
        fi
        cd ..
      done
    workingDirectory: $(system.defaultWorkingDirectory)/dist
    displayName: Publish new protobuf definitions version to its repositories
    condition: and(and(succeeded(), ne(variables['modifiedDirectories'], '')), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  
  - template: slack/protobuf/finish.yaml@ci_templates
    parameters:
      author: $(authorName)
      buildUrl: $(buildUrl)$(Build.BuildId)
      slackWebhook: $(slackCIProtobuf)
