/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package app_cluster_api;
option go_package = "github.com/nalej/grpc-app-cluster-api-go";

import "common/entities.proto";
import "conductor/entities.proto";
import "deployment-manager/entities.proto";
import "monitoring/entities.proto";
import "unified-logging/entities.proto";
import "cluster-watcher/entities.proto";

// Musician Service deployed in local clusters to score locally available resources.
service Musician {
    // Score Request to score an application
    rpc Score(conductor.ClusterScoreRequest) returns (conductor.ClusterScoreResponse) {}
}

// DeploymentManager service deployed in local cluster to manage deploy and undeploy
service DeploymentManager {
    // Execute Request a deployment plan to be executed.
    rpc Execute(deployment_manager.DeploymentFragmentRequest) returns (deployment_manager.DeploymentFragmentResponse) {}
    // Undeploy Request to undeploy an application
    rpc Undeploy(deployment_manager.UndeployRequest) returns (common.Success) {}
    // UndeployFragment Request to undeploy a fragment
    rpc UndeployFragment(deployment_manager.UndeployFragmentRequest) returns (common.Success) {}
    // SetServiceRoute setups an iptables DNAT for a given service
    rpc SetServiceRoute(deployment_manager.ServiceRoute) returns (common.Success){}
    // JoinZTNetwork message to Request a zt-agent to join into a new Network
    rpc JoinZTNetwork(deployment_manager.JoinZTNetworkRequest) returns (common.Success) {}
    // LeaveZTNetwork message to Request a zt-agent to leave a zero tier network
    rpc LeaveZTNetwork(deployment_manager.LeaveZTNetworkRequest) returns (common.Success) {}

}

// UnifiedLogging Slave services for localling retrieving a set of logs.
service UnifiedLogging {
    // Search for log entries matching a query.
    rpc Search(unified_logging.SearchRequest) returns (unified_logging.LogResponseList) {}
    // Expire the logs of a given application.
    rpc Expire(unified_logging.ExpirationRequest) returns (common.Success) {}
}

// MetricsCollector Collector services for monitoring information
service MetricsCollector {
    // GetClusterSummary Retrieve a summary of high level cluster resource availability
    rpc GetClusterSummary (monitoring.ClusterSummaryRequest) returns (monitoring.ClusterSummary) {}
    // GetClusterStats Retrieve statistics on cluster with respect to platform resources
    rpc GetClusterStats (monitoring.ClusterStatsRequest) returns (monitoring.ClusterStats) {}
    // Query Execute a query directly on the monitoring storage backend
    rpc Query (monitoring.QueryRequest) returns (monitoring.QueryResponse) {}
    // GetContainerStats Retrieve the stats of the service containers in the cluster.
    rpc GetContainerStats (common.Empty) returns (monitoring.ContainerStatsResponse) {}
}

// ClusterWatcherSlave Cluster watcher service running in the application clusters.
service ClusterWatcherSlave {
    //  UpdateClustersRequest to score an application
    rpc UpdateClusters(cluster_watcher.ListClustersWatchInfo) returns (common.Success) {}
}
