/*
 * Copyright (C) 2018 Nalej - All Rights Reserved
 */

syntax = "proto3";

package app_cluster_api;
option go_package = "github.com/nalej/grpc-app-cluster-api-go";

import "common/entities.proto";
import "conductor/entities.proto";
import "deployment-manager/entities.proto";
import "infrastructure-monitor/entities.proto";
import "unified-logging/entities.proto";

// Service deployed in local clusters to score locally available resources.
service Musician {
    // Request to score an application
    rpc Score(conductor.ClusterScoreRequest) returns (conductor.ClusterScoreResponse) {}
}

service DeploymentManager {
    // Request a deployment plan to be executed.
    rpc Execute(deployment_manager.DeploymentFragmentRequest) returns (deployment_manager.DeploymentFragmentResponse) {}
    // Request to undeploy an application
    rpc Undeploy(deployment_manager.UndeployRequest) returns (common.Success) {}
}

// Slave services for localling retrieving a set of logs.
service UnifiedLogging {
    // Search for log entries matching a query.
    rpc Search(unified_logging.SearchRequest) returns(unified_logging.LogResponse) {}
    // Expire the logs of a given application.
    rpc Expire(unified_logging.ExpirationRequest) returns(common.Success) {}
}

// Slave services for infrastructure monitoring information
service InfrastructureMonitor {
    // Retrieve a summary of high level cluster resource availability
    rpc GetClusterSummary(infrastructure_monitor.ClusterSummaryRequest) returns(infrastructure_monitor.ClusterSummary) {}
    // Retrieve statistics on cluster with respect to platform resources
    rpc GetClusterStats(infrastructure_monitor.ClusterStatsRequest) returns(infrastructure_monitor.ClusterStats) {}
    // Execute a query directly on the monitoring storage backend
    rpc Query(infrastructure_monitor.QueryRequest) returns(infrastructure_monitor.QueryResponse) {}
}
