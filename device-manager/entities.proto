/*
 * Copyright (C) 2019 Nalej - All Rights Reserved
 */

syntax = "proto3";

package device_manager;
option go_package = "github.com/nalej/grpc-device-manager-go";

// DeviceGroup contains the device group info
message DeviceGroup {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // Name of the device group.
    string name = 3;
    // Created time
    int64 created = 4;
    // Labels defined by the user.
    map<string, string> labels = 5;
    // Enabled determines if the device can interact with the running applications.
    bool enabled = 6;
    // DefaultDeviceConnectivity determines if the devices are enable or disable by default
    bool default_device_connectivity = 7;
    // DeviceGroupApiKey with the API used by the devices associated to this group for registration purposes.
    string device_group_api_key = 8;
}

message DeviceGroupList{
    repeated DeviceGroup groups = 1;
}

// AddDeviceGroupRequest request to add a new device group in the system
message AddDeviceGroupRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // Name of the device group
    string name = 2;
    // Enabled determines if the device accepts new devices and allow device login.
    bool enabled = 3;
    // DefaultDeviceConnectivity determines if a new device attached to the group is enabled.
    bool default_device_connectivity = 4;
}

// AddDeviceGroupRequest request to update a device group
message UpdateDeviceGroupRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // UpdateEnabled determines if the flag 'Enabled' is going to update
    bool update_enabled = 3;
    // Enabled determines if this group is able (or not) to interact with the running applications.
    bool enabled = 4;
    // UpdateDeviceConnectivity determines if the flag 'DefaultDeviceConnectivity' is going to update
    bool update_device_connectivity = 5;
    //determines whether the devices in a group are created enabled or disabled by default
    bool default_device_connectivity = 6;
}

// enumerate to determinate if a device is ONLINE or OFFLINE
enum DeviceStatus {
    ONLINE = 0;
    OFFLINE = 1;
}

// DeviceGroup contains the device info
message Device{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // DeviceId with the device identifier.
    string device_id = 3;
    // RegisterSince is the timestamp when the device joined the group.
    int64 register_since = 4;
    // Labels defined by the user.
    map<string, string> labels = 5;
    // Enabled determines if the device can interact with the running applications.
    bool enabled = 6;
    // DeviceApiKey contains the API KEY used by the device to send data.
    string device_api_key = 7;
    // DeviceStatus contains the status of the device (ONLINE/OFFLINE)
    DeviceStatus device_status = 8;
}

message DeviceList{
    repeated Device devices = 1;
}

// UpdateDeviceRequest enable/disable a device
message UpdateDeviceRequest{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // DeviceId with the device identifier.
    string device_id = 3;
    // Enabled determines if the device can interact with the running applications.
    bool enabled = 4;
}

// RegisterDeviceRequest contains the information required to register a new device in a given device group.
message RegisterDeviceRequest {
    // OrganizationID with the organization identifier
    string organization_id = 1;
    // DeviceGroupID
    string device_group_id = 2;
    // DeviceGroupApiKey with the device group key
    string device_group_api_key = 3;
    //DeviceId with the device identifier provided by the IoT SDK
    string device_id = 4;
    // Labels defined by the user
    map<string, string> labels = 5;
}

// RegisterResponse contains the DeviceApiKey that is assigned to the device.
message RegisterResponse {
    // DeviceId with the device identifier.
    string device_id = 1;
    // DeviceApiKey generated by the Nalej platform.
    string device_api_key = 2;
}

message DeviceLabelRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // DeviceId with the device identifier.
    string device_id = 3;
    map<string, string> labels = 4;
}

// Latency
message LatencyMeasure{
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // DeviceGroupId with the device group identifier.
    string device_group_id = 2;
    // DeviceId with the device identifier.
    string device_id = 3;
    // Latency measure
    int32 latency = 4;
    // timestamp of the latency creation
    int64 inserted = 5;
}

message LatencyMeasureList {
    repeated LatencyMeasure latencies = 1;
}