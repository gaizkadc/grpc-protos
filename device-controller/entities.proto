/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package device_controller;
option go_package = "github.com/nalej/grpc-device-controller-go";

import "device/entities.proto";

// RegisterLatencyRequest register ping latency
message RegisterLatencyRequest {
    // organization identifier
    string organization_id = 1;
    // device_group identifier
    string device_group_id = 2;
    // device identifier
    string device_id = 3;
    // Latency to register (milliseconds)
    int32 latency = 4;
}

// SelectClusterRequest select the best latency in the list
message SelectClusterRequest {
    // organization identifier
    string organization_id = 1;
    // device_group identifier
    string device_group_id = 2;
    // device identifier
    string device_id = 3;
    // list of latencies to compare
    repeated int32 latencies = 4;
}

// RegisterResult indicates whether a ping is acceptable
enum RegisterResult {
    // the device can continue working as it
    OK = 0;
    // latency check on all available clusters must be performed
    LATENCY_CHECK_REQUIRED = 1;
}
// RegisterPingResult defines the result of a RegisterPing operation,
// can be OK or LATENCY_CHECK_REQUIRED
message RegisterLatencyResult {
    RegisterResult result = 1;
}

// SelectedCluster is an index of the cluster to which the device is advised to connect
message SelectedCluster {
    int32 cluster_index = 1;
}