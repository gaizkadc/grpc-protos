/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package monitoring;

option go_package = "github.com/nalej/grpc-monitoring-go";

import "google/protobuf/timestamp.proto";
import "inventory/entities.proto";

// Request a summary of cluster resource information. If the range is omitted,
// the current point-results are returned; otherwise, an average over the
// specified number of minutes is returned.
message ClusterSummaryRequest {
    // Organization identifier
    string organization_id = 1;
    // Cluster identifier
    string cluster_id = 2;
    // Range over which to average the results
    int32 range_minutes = 3;
}

// Single cluster resource statistic
message ClusterStat {
    int64 total = 1;
    int64 available = 2;
}

// Response message for cluster resource summary information
message ClusterSummary {
    // Organization identifier
    string organization_id = 1;
    // Cluster identifier
    string cluster_id = 2;
    // CPU resource information in millicores
    ClusterStat cpu_millicores = 3;
    // RAM resource information in bytes
    ClusterStat memory_bytes = 4;
    // Persistant storage information in bytes. Note that this is on block level,
    // i.e., the amount of total bytes from all block devices present in the
    // cluster. This does not mean all is usable for user applications.
    ClusterStat storage_bytes = 5;
    // Largest available usable storage space - currently just looking
    // at the largest block device
    ClusterStat usable_storage_bytes = 6;
}

// PlatformStatsField Enum of all statistics available that are relevant for the platform
enum PlatformStatsField {
    SERVICES = 0;
    VOLUMES = 1;
    FRAGMENTS = 2;
    ENDPOINTS = 3;
}

// ClusterStatsRequest Request for all platform-relevant statistics available for a single cluster
message ClusterStatsRequest {
    // Organization identifier
    string organization_id = 1;
    // Cluster identifier
    string cluster_id = 2;
    // Range over which to average the results
    int32 range_minutes = 3;
    // Statistics to request. All if not specified.
    repeated PlatformStatsField fields = 4;
}

// PlatformStat A single platform-relevant statistic
message PlatformStat {
    // Counter: total amount of created entities
    int64 created = 1;
    // Counter: total amount of deleted entities
    int64 deleted = 2;
    // Gauge: number of currently running entities
    int64 running = 3;
    // Gauge: number of entities currently in error state
    int64 errors = 4;
}

// ClusterStats Response for platform-relevant statistics for a single cluster
message ClusterStats {
    // Organization identifier
    string organization_id = 1;
    // Cluster identifier
    string cluster_id = 2;
    // Map for all platform fields. Note that this is a mapping from
    // PlatformStatsField to the PlatformStat; the PlatformStatsField
    // is represented as an int instead of the enum due to protobuf
    // limitations.
    map<int32, PlatformStat> stats = 3;
}

// QueryType Enum for the specific query type for raw queries; depending on the
// available backends.
enum QueryType {
    PROMETHEUS = 0;
}

// QueryRequest Execute a raw query on a single cluster
message QueryRequest {
    // Organization identifier
    string organization_id = 1;
    // Cluster identifier
    string cluster_id = 2;
    // Backend query type
    QueryType type = 3;
    // Query string
    string query = 4;
    // Time range and resolution over which to execute the query
    // See e.g. https://prometheus.io/docs/prometheus/latest/querying/api/#range-queries
    message QueryRange {
        // Start of query time range
        google.protobuf.Timestamp start = 1;
        // End of query time range
        google.protobuf.Timestamp end = 2;
        // Query resolution step width in float number of seconds
        float step = 3;
    }
    QueryRange range = 5;
}

// QueryResponse Response to a raw query request
message QueryResponse {
    // Organization identifier
    string organization_id = 1;
    // Cluster identifier
    string cluster_id = 2;
    // Backend query response type
    QueryType type = 3;

    // See https://prometheus.io/docs/prometheus/latest/querying/api/#expression-queries
    message PrometheusResponse {
        // Response result type, depending on query
        enum ResultType {
            MATRIX = 0;
            VECTOR = 1;
            SCALAR = 2;
            STRING = 3;
        }
        ResultType result_type = 1;

        // List of responses
        message ResultValue {
            message Value {
                google.protobuf.Timestamp timestamp = 1;
                string value = 2;
            }

            // Map of metadata labels for this specific response value list
            map<string, string> metric = 1;
            // Value list for this metrci
            repeated Value value = 2;
        }
        repeated ResultValue result = 2;
    }

    // The query response has exactly one valid response result type
    oneof result {
        PrometheusResponse prometheus_result = 16;
    }
}

//
// Inventory monitoring through Edge Controller
//

// MetricsList is used to communicate what metrics are available for a group
// of assets
message MetricsList {
    repeated string metrics = 1;
}

// QueryAggregationType indicates if and how the results should be aggregated
// over the selected assets (aggregation over time range is specified by
// resolution and is always averaged)
enum AggregationType {
    NONE = 0;
    SUM = 1;
    AVG = 2;
}

// QueryMetricsRequest describes a query to retrieve specific metrics, either
// individual data points, vectors or matrices; not aggregated, aggregated
// over time, and/or aggregated over asset
message QueryMetricsRequest {
    // Assets identifies the assets for which we want metrics
    inventory.AssetSelector assets = 1;
    // Metrics is the list of metrics to retrieve; if emtpy, return all
    repeated string metrics = 2;

    // TimeRange describes the time range for which we want metrics
    message TimeRange {
        // Either timestamp != 0 && (time_start == time_end == resolution == 0),
        // or timestamp == 00 && (time_start != 0 || time_end != 0)

        // Timestamp is set to request single data point
        int64 timestamp = 1;
        // TimeStart indicates the start of the time range;
        // time_start == 0 means starting from oldest data available
        int64 time_start = 2;
        // TimeEnd indicates the end of the time range;
        // time_end == 0 means ending at newest data available
        int64 time_end = 3;
        // Resolution indicates the seconds between returned data points;
        // If resolution == 0, return a single, aggregated data point
        int64 resolution = 4;
    }
    TimeRange time_range = 3;

    AggregationType aggregation = 4;
}

// QueryMetricsResult contains the result of a metrics query. This can
// encapsulate a single value per metric, a vector or a matrix; this depends
// on whether a single point in time or a time range is requested, whether
// a single asset or asset group is requested and what, if any, aggregation
// is requested.
message QueryMetricsResult {
    // Value is a tuple of (timestamp, value). This will be linked
    // to a specific asset and a specific metric.
    message Value {
        int64 timestamp = 1;
        int64 value = 2;
        // Number of assets used to calculate the value. Only relevant if the
        // value is part of an aggregation - otherwise set to 1.
        int64 asset_count = 3;
    }
    // AssetMetricValues is a list of values for a specific asset. This will
    // be linked to a specific metric.
    message AssetMetricValues {
        // AssetId is the asset identifier these values relate to. If the
        // result is an aggregation over more than one asset, asset_id is
        // empty and aggregation is set.
        string asset_id = 1;
        repeated Value values = 2;
        AggregationType aggregation = 3;
    }
    // AssetMetrics is a list of assets with their values; This will be linked
    // to a specific metric.
    // Although the metrics message is repeated, in current scenarios we will
    // always have a single AssetMetricValue. The capability of including
    // metrics for more than one individual asset is for future use.
    message AssetMetrics {
        repeated AssetMetricValues metrics = 1;
    }

    // Metrics is the mapping of metrics to a list of assets, each with a list
    // of values
    map<string, AssetMetrics> metrics = 1;
}

// OrganizationApplicationStatsRequest Request objet to get metrics from the services in an application cluster
message OrganizationApplicationStatsRequest {
    string organization_id = 1;
}

message OrganizationApplicationStatsResponse {
    repeated OrganizationApplicationStats service_instance_stats = 1;
    int64 timestamp = 2;
}

message OrganizationApplicationStats {
    string organization_id = 1;
    string organization_name = 2;
    string app_instance_id = 3;
    string app_instance_name = 4;
    string service_group_instance_id = 5;
    string service_group_instance_name = 6;
    string service_instance_id = 7;
    string service_instance_name = 8;
    double cpu_millicore = 9;
    double memory_byte = 10;
    double storage_byte = 11;
}

message ContainerStatsResponse {
    repeated ContainerStats container_stats = 1;
}

message ContainerStats {
    string namespace = 1;
    string pod = 2;
    string container = 3;
    string appInstanceId = 4;
    string image = 5;
    double cpu_millicore = 6;
    double memory_byte = 7;
    double storage_byte = 8;
}
