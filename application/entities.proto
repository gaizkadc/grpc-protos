/*
 * Copyright (C) 2018 Nalej - All Rights Reserved
 */

syntax = "proto3";

package application;
option go_package = "github.com/nalej/grpc-application-go";

// AppDescriptor structure defines the top level abstraction for an application and all the associated services.
message AppDescriptor {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // Name of the application.
    string name = 3;
    // Description of the application.
    string description = 4;
    // ConfigurationOptions defines a key-value map of configuration options.
    map<string, string> configuration_options = 5;
    // EnvironmentVariables defines a key-value map of environment variables and values that will be passed to all
    // running services.
    map<string, string> environment_variables = 6;
    // Labels defined by the user.
    map<string, string> labels = 7;
    // Rules that define the connectivity between the elements of an application.
    repeated SecurityRule rules = 8;
    // Groups with the Service collocation strategies.
    repeated ServiceGroup groups = 9;
    // Services of the application.
    repeated Service services = 10;
}

// SecurityRule structure defining which element can access a given application service.
message SecurityRule {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // RuleId with the security rule identifier.
    string rule_id = 3;
    // Name of the security rule.
    string name = 4;
    // SourceServiceId defining the service onto which the security rule is defined.
    string source_service_id = 5;
    // SourcePort defining the port that is affected by the current rule.
    int32 source_port = 6;
    // Access level to that port defining who can access the port.
    PortAccess access = 7;
    // AuthServices defining a list of services that can access the port.
    repeated string auth_services = 8;
    // DeviceGroups defining a list of device groups that can access the port.
    repeated string device_groups = 9;
}

// PortAccess enumeration defining the actor with access to a given port.
enum PortAccess {
    // AllAppServices to indicate that all services of an application can access a given port.
    ALL_APP_SERVICES = 0;
    // AppServices to indicate that a set of services are authorized to access the port.
    APP_SERVICES = 1;
    // Public to indicate that the port should be publicly available on the Internet.
    PUBLIC = 2;
    // DeviceGroup to indicate that the port will be accessed by a set of device groups.
    DEVICE_GROUP = 3;
}

// ServiceGroup structure to represent a collection of services that must be deployed following a given collocation
// policy.
message ServiceGroup {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // ServiceGroupId with the group identifier.
    string service_group_id = 3;
    // Name of the service group.
    string name = 4;
    // Description of the service group.
    string description = 5;
    // Services defining a list of service identifiers that belong to the group.
    repeated string services = 6;
    // Policy indicating the deployment collocation policy.
    CollocationPolicy policy = 7;
}

// CollocationPolicy defines how the services of a service group must be deployed.
enum CollocationPolicy {
    SAME_CLUSTER = 0;
    SEPARATE_CLUSTERS = 1;
}

// ServiceType defines the types of services supported in the system.
enum ServiceType {
    DOCKER = 0;
}

// Configuration structure defining the service configuration.
message ConfigFile {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // ConfigFileId with the config file identifier.
    string config_file_id = 3;
    // Content of the configuration file.
    bytes content = 4;
    // MountPath of the configuration file in the service instance.
    string mount_path = 5;
}

message ImageCredentials {
    string username = 1;
    string password = 2;
    string email = 3;
    string dockerRepository = 4;
}

// Service structure that represents a microservice of a given application and that can be deployed on its own.
message Service {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // ServiceId with the service identifier.
    string service_id = 3;
    // Name of the service.
    string name = 4;
    // Description of the service.
    string description = 5;
    // ServiceType represents the underlying technology of the service to be launched.
    ServiceType type = 6;
    // Image contains the URL/name of the image to be executed.
    string image = 7;
    // ImageCredentials with the data required to access the repository the image is available at.
    ImageCredentials credentials = 8;
    // DeploySpecs with the resource specs required by the service.
    DeploySpecs specs = 9;
    // Storage restrictions
    repeated Storage storage = 10;
    // ExposedPorts contains the list of ports exposed by the current service.
    repeated Port exposed_ports = 11;
    // EnvironmentVariables defines a key-value map of environment variables and values that will be passed to all
    // running services.
    map<string, string> environment_variables = 12;
    // Configs contains the configuration files required by the service.
    repeated ConfigFile configs = 13;
    // Labels with the user defined labels.
    map<string, string> labels = 14;
    // DeployAfter contains the list of services that must be running before launching a service.
    repeated string deploy_after = 15;
}

enum ServiceStatus {
    SERVICE_SCHEDULED = 0;
    SERVICE_WAITING = 1;
    SERVICE_DEPLOYING = 2;
    SERVICE_RUNNING = 3;
    SERVICE_ERROR = 4;
}

message Port {
    string name = 1;
    int32 internal_port = 2;
    int32 exposed_port = 3;
    repeated Endpoint endpoints = 4;
}

enum EndpointType {
    IS_ALIVE = 0;
    REST = 1;
    WEB = 2;
    PROMETHEUS = 3;
}

message Endpoint {
    EndpointType type = 1;
    string path = 2;
}

message Storage {
    int64 size = 1;
    string mount_path = 2;
    StorageType type = 3;
}

enum StorageType {
    EPHEMERAL = 0;
    CLUSTER_LOCAL = 1;
    CLUSTER_REPLICA = 2;
    CLOUD_PERSISTENT = 3;
}

message DeploySpecs {
    int64 cpu = 1;
    int64 memory = 2;
    int32 replicas = 3;
}

enum ApplicationStatus {
    QUEUED = 0;
    PLANNING = 1;
    SCHEDULED = 2;
    DEPLOYING = 3;
    RUNNING = 4;
    INCOMPLETE = 5;
    PLANNING_ERROR = 6;
    DEPLOYMENT_ERROR = 7;
    ERROR = 8;
}

message AppDescriptorId {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
}

message AddAppDescriptorRequest {
    string request_id = 1;
    // OrganizationId with the organization identifier.
    string organization_id = 2;
    // Name of the application.
    string name = 3;
    // Description of the application.
    string description = 4;
    // ConfigurationOptions defines a key-value map of configuration options.
    map<string, string> configuration_options = 5;
    // EnvironmentVariables defines a key-value map of environment variables and values that will be passed to all
    // running services.
    map<string, string> environment_variables = 6;
    // Labels defined by the user.
    map<string, string> labels = 7;
    // Rules that define the connectivity between the elements of an application.
    repeated SecurityRule rules = 8;
    // Groups with the Service collocation strategies.
    repeated ServiceGroup groups = 9;
    // Services of the application.
    repeated Service services = 10;
}

message AppDescriptorList {
    repeated AppDescriptor descriptors = 1;
}

// AppInstance represents an instance of the application in the system.
message AppInstance {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 3;
    // Name of the application.
    string name = 4;
    // Description of the application.
    string description = 5;
    // ConfigurationOptions defines a key-value map of configuration options.
    map<string, string> configuration_options = 6;
    // EnvironmentVariables defines a key-value map of environment variables and values that will be passed to all
    // running services.
    map<string, string> environment_variables = 7;
    // Labels defined by the user.
    map<string, string> labels = 8;
    // Rules that define the connectivity between the elements of an application.
    repeated SecurityRule rules = 9;
    // Groups with the Service collocation strategies.
    repeated ServiceGroupInstance groups = 10;
    // Services of the applicaiton.
    repeated ServiceInstance services = 11;
    // Status of the deployed instance.
    ApplicationStatus status = 12;
}

// ServiceGroupInstance structure to represent a collection of services that must be deployed following a given collocation
// policy.
message ServiceGroupInstance {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 3;
    // ServiceGroupId with the group identifier.
    string service_group_id = 4;
    // Name of the service group.
    string name = 5;
    // Description of the service group.
    string description = 6;
    // ServicesInstances defining a list of service identifiers that belong to the group.
    repeated string service_instances = 7;
    // Policy indicating the deployment collocation policy.
    CollocationPolicy policy = 8;
}

message ServiceInstance {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 3;
    // ServiceId with the service identifier.
    string service_id = 4;
    // Name of the service.
    string name = 5;
    // Description of the service.
    string description = 6;
    // ServiceType represents the underlying technology of the service to be launched.
    ServiceType type = 7;
    // Image contains the URL/name of the image to be executed.
    string image = 8;
    // ImageCredentials with the data required to access the repository the image is available at.
    ImageCredentials credentials = 9;
    // DeploySpecs with the resource specs required by the service.
    DeploySpecs specs = 10;
    // Storage restrictions
    repeated Storage storage = 11;
    // ExposedPorts contains the list of ports exposed by the current service.
    repeated Port exposed_ports = 12;
    // EnvironmentVariables defines a key-value map of environment variables and values that will be passed to all
    // running services.
    map<string, string> environment_variables = 13;
    // Configs contains the configuration files required by the service.
    repeated ConfigFile configs = 14;
    // Labels with the user defined labels.
    map<string, string> labels = 15;
    // DeployAfter contains the list of services that must be running before launching a service.
    repeated string deploy_after = 16;
    // Status of the deployed service
    ServiceStatus status = 17;
    // Endpoints exposed to the users by the service.
    repeated string endpoints = 18;
    // DeployedOnClusterId specifies which is the cluster where the service is running.
    string deployed_on_cluster_id = 19;
}

// AddAppInstanceRequest message to create a new application instance. Initially, the instance will be a copy of the
// associated descriptor. This will change in future releases to allow per instance customization.
message AddAppInstanceRequest {
    string organization_id = 1;
    // AppDescriptorId with the application descriptor identifier.
    string app_descriptor_id = 2;
    // Name of the application instance.
    string name = 3;
    // Description of the application the application instance.
    string description = 4;
}

message AppInstanceId {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 2;
}

message AppInstanceList {
    repeated AppInstance instances = 1;
}

message UpdateAppStatusRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 2;
    // Status with the new transition.
    ApplicationStatus status = 3;
}

message UpdateServiceStatusRequest {
    // OrganizationId with the organization identifier.
    string organization_id = 1;
    // AppInstanceId with the application instance identifier.
    string app_instance_id = 3;
    // ServiceId with the service identifier.
    string service_id = 4;
    // Status with the new transition.
    ServiceStatus status = 5;
    // Endpoints exposed to the users by the service.
    repeated string endpoints = 6;
    // DeployedOnClusterId specifies which is the cluster where the service is running.
    string deployed_on_cluster_id = 7;
}