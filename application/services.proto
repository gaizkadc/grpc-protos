/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package application;
option go_package = "github.com/nalej/grpc-application-go";

import "application/entities.proto";
import "organization/entities.proto";
import "common/entities.proto";

service Applications {
    // AddAppDescriptor adds a new application descriptor to a given organization.
    rpc AddAppDescriptor(AddAppDescriptorRequest) returns (AppDescriptor){}
    // ListAppDescriptors retrieves a list of application descriptors.
    rpc ListAppDescriptors(organization.OrganizationId) returns (AppDescriptorList){}
    // GetAppDescriptor retrieves a given application descriptor.
    rpc GetAppDescriptor(AppDescriptorId) returns (AppDescriptor) {}
    // UpdateAppDescriptor allows the user to update the information of a registered descriptor.
    rpc UpdateAppDescriptor(UpdateAppDescriptorRequest) returns (AppDescriptor){}
    // RemoveAppDescriptor removes an application descriptor.
    rpc RemoveAppDescriptor(AppDescriptorId) returns (common.Success){}

    // AddAppInstance adds a new application instance to a given organization.
    rpc AddAppInstance(AddAppInstanceRequest) returns (AppInstance){}
    // ListAppInstances retrieves a list of application instances.
    rpc ListAppInstances(organization.OrganizationId) returns (AppInstanceList){}
    // GetAppInstance retrieves a given application instance.
    rpc GetAppInstance(AppInstanceId) returns (AppInstance) {}
    // UpdateAppInstance adds a new application instance to a given organization.
    rpc UpdateAppInstance(AppInstance) returns (common.Success){}
    // UpdateAppStatus updates the status of an application instance.
    rpc UpdateAppStatus(UpdateAppStatusRequest) returns (common.Success){}
    // UpdateServiceStatus updates the status of an application instance service.
    rpc UpdateServiceStatus(UpdateServiceStatusRequest) returns(common.Success){}
    // RemoveAppInstance removes an application instance
    rpc RemoveAppInstance(AppInstanceId) returns (common.Success){}

    // GetAppInstanceReducedSummary retrieves the reduced summary of a given application instance.
    rpc GetAppInstanceReducedSummary(AppInstanceId) returns (AppInstanceReducedSummary) {}
    // ListAppInstancesReducedSummary retrieves a list of a reduced summary of application instances.
    rpc ListAppInstancesReducedSummary(organization.OrganizationId) returns (AppInstanceReducedSummaryList){}


    // AddServiceGroupInstance to an already existing application instance
    rpc AddServiceGroupInstances(AddServiceGroupInstancesRequest) returns (ServiceGroupInstancesList){}
    // RemoveServiceGroupInstancesRequest removes any service group instance from an application instance
    rpc RemoveServiceGroupInstances(RemoveServiceGroupInstancesRequest) returns (common.Success){}
    // AddServiceInstance to an already existing service group instance
    rpc AddServiceInstance(AddServiceInstanceRequest) returns (ServiceInstance){}

    // GetServiceGroupInstanceMetadata returns the metadata entry of an existing ServiceGroupInstance
    rpc GetServiceGroupInstanceMetadata(GetServiceGroupInstanceMetadataRequest) returns (InstanceMetadata){}
    // UpdateServiceGroupInstanceMetadata updates the value of an existing metadata instance
    rpc UpdateServiceGroupInstanceMetadata(InstanceMetadata) returns (common.Success){}

    // AddAppEndPoint adds a new App Endpoint to a given service instance
    rpc AddAppEndpoint(AddAppEndpointRequest) returns (common.Success) {}
    // GetAppEndPoint retrieves a list of appEndpoints
    rpc GetAppEndpoints(GetAppEndPointRequest) returns (AppEndpointList){}
    // RemoveAppEndpoints removes all the app endpoints of an app_instance
    rpc RemoveAppEndpoints(RemoveAppEndpointRequest) returns (common.Success) {}

    // AddAppZtNetwork add a new zerotier network for an existing app instance
    rpc AddAppZtNetwork(AddAppZtNetworkRequest) returns (common.Success) {}
    // RemoveAppZtNetwork remove the network instance for an application instance
    rpc RemoveAppZtNetwork(RemoveAppZtNetworkRequest) returns (common.Success) {}
    // RemoveAppZtNetwork remove the network instance for an application instance
    rpc GetAppZtNetwork(GetAppZtNetworkRequest) returns (AppZtNetwork) {}
    // AddZtNetworkProxy adds a new network proxy for an existing private network
    rpc AddZtNetworkProxy(ServiceProxy) returns(common.Success) {}
    // RemoveZtnetworkProxy removes a proxy from the list of available entries of a private network
    rpc RemoveZtNetworkProxy(RemoveAppZtNetworkProxy) returns(common.Success) {}
    // Add Zt member authorization data
    rpc AddAuthorizedZtNetworkMember(AddAuthorizedZtNetworkMemberRequest) returns (ZtNetworkMember) {}
    // Delete Zt member authorization data
    rpc RemoveAuthorizedZtNetworkMember(RemoveAuthorizedZtNetworkMemberRequest) returns (common.Success) {}
    // Get the Zt authorized members
    rpc GetAuthorizedZtNetworkMember(GetAuthorizedZtNetworkMemberRequest) returns (ZtNetworkMembers) {}
    // ListAuthorizedZTNetworkMembers retrieves a list of ztMembers in a zero tier network
    rpc ListAuthorizedZTNetworkMembers(ListAuthorizedZtNetworkMemberRequest) returns (ZtNetworkMembers) {}


    // GetDescriptorAppParameters retrieves a list of application parameters of a descriptor
    rpc GetDescriptorAppParameters (AppDescriptorId) returns (AppParameterList){}
    // GetInstanceParameters retrieves a list of application parameters of an instance
    rpc GetInstanceParameters (AppInstanceId) returns (InstanceParameterList) {}

    // AddParametrizedDescriptor adds a parametrized descriptor to a given descriptor
    rpc AddParametrizedDescriptor(ParametrizedDescriptor) returns (ParametrizedDescriptor){}
    // GetParametrizedDescriptor retrieves the parametrized descriptor associated with an instance
    rpc GetParametrizedDescriptor(AppInstanceId) returns (ParametrizedDescriptor) {}
    // RemoveParametrizedDescriptor removes the parametrized descriptor associated with an instance
    rpc RemoveParametrizedDescriptor(AppInstanceId) returns (common.Success) {}
}
