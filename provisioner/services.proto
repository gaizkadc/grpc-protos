/*
 * Copyright 2019 Nalej
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package provisioner;
option go_package = "github.com/nalej/grpc-provisioner-go";

import "common/entities.proto";
import "provisioner/entities.proto";

// Provision service to create clusters.
service Provision {
    // ProvisionCluster triggers the provisioning operation on a given cloud infrastructure provider.
    rpc ProvisionCluster(ProvisionClusterRequest) returns (ProvisionClusterResponse){}
    // CheckProgress gets an updated state of a provisioning request.
    rpc CheckProgress(common.RequestId) returns(ProvisionClusterResponse){}
    // RemoveProvision cancels an ongoing provisioning or removes the information of an already processed provision operation.
    rpc RemoveProvision(common.RequestId) returns(common.Success){}
}

// Decommission service offering methods to free infrastructure.
service Decommission {
    // DecommissionCluster frees the resources of a given cluster.
    rpc DecommissionCluster(DecommissionClusterRequest) returns (common.OpResponse){}
    // CheckProgress gets an updated state of a decommission request.
    rpc CheckProgress(common.RequestId) returns (common.OpResponse){}
    // RemoveDecommission cancels an ongoing decommissioning or removes the information of an already processed decommissioning operation.
    rpc RemoveDecommission(common.RequestId) returns (common.Success){}
}

// Scale service offering a method to dynamically change the capacity of a provisioned cluster.
service Scale {
    // ScaleCluster triggers the rescaling of a given cluster by adding or removing nodes.
    rpc ScaleCluster(ScaleClusterRequest) returns (ScaleClusterResponse){}
    // CheckProgress gets an updated state of a scale request.
    rpc CheckProgress(common.RequestId) returns (ScaleClusterResponse){}
    // RemoveScale cancels an ongoing scale process or removes the information of an already processed one.
    rpc RemoveScale(common.RequestId) returns (common.Success){}
}

// Management operations on a cluster.
service Management {
    // GetKubeConfig retrieves the KubeConfig file to access the management layer of Kubernetes.
    rpc GetKubeConfig(ClusterRequest) returns (KubeConfigResponse){}
}
